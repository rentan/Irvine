/*
スクリプト初期化データ
guid={115F43E2-884F-4B64-A854-D91568694635}
caption=Dorothy2R OnHttpRequest
version=20160208
hint=Dorothy2R OnHttpRequest
event=OnHttpRequest
match=
author=xor, rentan
synchronize=0
*/

// based on Dorothy2A.dms version 0.32 by xor

/*
Copyright (C) 2014-2016 rentan at rentan.org

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


//------------------------------- irvinePath -------------------------------

void function irvinePath () { };
(function (p) {
  var reg = new RegIni ('\Software\Wildforce\Irvine');

  var paths = [ 'application', 'option', 'import', 'plugins_all', 'plugins_user',
                'scripts_all', 'scripts_user', 'iemenu_all', 'iemenu_user' ];
  for (var i = 0; i < paths.length; ++i) {
    var k = paths [i];
    p [(k == 'import') ? 'importz' : k] = reg.read ('path', k, '');
  }

  p.scripts = p.scripts_all;
  p.scripts2 = p.scripts.replace (/\\[^\\]*$/, '');

  p.queue2 = p.option.replace (/[^\\]*$/, '')+ 'queue';
  p.queue = p.queue2 + '\';
}) (irvinePath.prototype);


//---------------------- Global オブジェクトへの追加 -----------------------


// ファイルを読み込んで返す
Global.file_load = function (path) {
  var fullpath = /^[a-z]:/i.test (path) ? path : Dorothy.path + path;
  var file = new File (fullpath);

  var mutex = new Mutex ('file_load');
  try {
    mutex.lock ();
    file.open ('r');
    return file.read ();
  }
  catch (e) {
    println ('error>' + e + ' ' + path + ' の読み込みに失敗しました。');
  }
  finally {
    file.close ();
    mutex.unlock ();
  }

  exit ();
};


// Dorothy2\common\*.dms を読み込んで実行する
Global.common_xload = function (name) {
  // println (name + ' {');
  // var tc = Win32.getTickCount ();

  var n = name.replace (/\//g, '\');

  // common_name 定義時はそのフォルダから優先検索
  // common_sp == true 時は common(special) フォルダから優先検索
  function f (dir, show) {
    var file = new File (Dorothy.path + dir + '\' + n + '.dms');
    if (file.exists ()) {
      if (show) {
        println ('common_xload: ' + file.path);
      }
      return file.path;
    }
    return null;
  }

  var show = Dorothy.common_show;
  var file = (Dorothy.common_name && f (Dorothy.common_name, show))
          || (Dorothy.common_sp && f ('common(special)', show))
          || f ('common', false);

  if (!file) {
    println ('common_xload: ファイルがありません: ' + n);
    exit ();
  }

  try {
    var src = file_load (file);

    var s = Dorothy.validateCommon (n, src);
    if (s) {
      throw s;
    }

    Dorothy._eval (src);
  }
  catch (e) {
    println ('common_xload: ' + e + ': ' + file);
    exit ();
  }

  // println ('} ' + name + ' ' + (Win32.getTickCount () - tc) + 'ms');
};


// Dorothy2\common\<引数>.dms を読み込んで実行する
Global.common_load = function () {
  for (var i = 0; i < arguments.length; i++) {
    if (Dorothy.common.hasKey (arguments [i])) {
      // 既にロード済みのファイルは無視
      continue;
    }

    common_xload (arguments [i]);
  }
};


// Dorothy2\program\<name>.dms を読み込んで返す
Global.program_load = function (name) {
  return file_load (Dorothy.programDir + name + '.dms');
};


// Dorothy2\user\<プログラム名>\<name> を読み込んで返す
Global.user_load = function (name) {
  return file_load ('user\' + Dorothy.matchFile + '\' + name);
};


// Dorothy2\user\<プログラム名>\<引数>.dms を読み込んで実行する
Global.user_program_load = function () {
  for (var i = 0; i < arguments.length; i++) {
    try {
      Dorothy._eval (user_load (arguments [i] + '.dms'));
    }
    catch (e) {
      println (e + ' ' + Dorothy.matchFile + '\' + arguments [i] + '.dms');
      exit ();
    }
  }
};


// debug 時のみログ表示
Global.print_debug = function (s) {
  if (debug) {
    println (s);
  }
};


// (非推奨) ファイル名に使用できない記号や実体参照を変換する
Global.changeFileName = function (filename) {
  return filename;
};


// xor.dms joint()
Global.joint = function (separator) {
  var jointed = '';

  var len = arguments.length;
  for (var i = 1; i < len; ++i) {
    var s = arguments [i];
    jointed += (jointed == '' || s == '') ? s : separator + s;
  }

  return jointed;
};


//-------------------------- Dorothy オブジェクト --------------------------

// Dorothy オブジェクトをグローバル定義
Dorothy = {
  version: 'uninitialized',

  // DOA からの実行かどうか
  isDOA: false,

  common: { }
};


// Dorothy.matchFile 等を設定する
Dorothy.setMatchName = function (name, type) {
  Dorothy.matchFile = name;
  Dorothy.matchType = type;

  var n = name || null;
  Dorothy.userPath = n && Dorothy.path + 'user\' + name + '\';
  Dorothy.userIniPath = n && Dorothy.userPath + name + '.ini';
};


// ProgramMatcher を作成して返す
Dorothy.createProgramMatcher = function (ignoreDot) {
  function find (url, item) {
    var ignore = this._ignore;
    var comment = (item && item.comment) ? 'comment:' + item.comment : null;

    var matchList = Dorothy.matchList;
    var len = matchList.length;

    while (this._index < len) {
      var m = matchList [this._index++];
      var re = m.re;

      if (ignore && ignore.test (re.source)) {
        // //match=. や //match=comment: のファイルは無視する
        continue;
      }

      // //match=comment:〜
      if (/^comment:/.test (re.source)) {
        if (comment && re.test (comment)) {
          Dorothy.setMatchName (m.f, 'comment');
          return m;
        }
      }

      // //match=〜
      else if (re.test (url)) {
        Dorothy.setMatchName (m.f, 'url');
        return m;
      }
    }

    // 一致するファイルがなかった
    Dorothy.setMatchName ('', '');
    return null;
  }

  function rewind () {
    this._index = 0;
  }

  // ProgramMatcher オブジェクトを作成して返す
  return {
    _index: 0,
    _ignore: ignoreDot ? /^(\.$|comment:)/ : null,
    find: find,
    rewind: rewind
  };
};


// プログラムの形式が正しいか調べる
Dorothy.validateProgram = function (src) {
  if (!/^\/\/Dorothy2(.+?)^\/\/end/m.test (src)){
    return 'error>プログラムが正しくありません。';
  }
  var head = Dorothy.programHead = RegExp.$1;

  if (!/^\/\/author=(.*?)$/m.test (head) || RegExp.$1 == '') {
    return 'error>author が未定義。';
  }
  Dorothy.author = RegExp.$1;

  if (!/^\/\/caption=(.*?)$/m.test (head) || RegExp.$1 == '') {
    return 'error>caption が未定義。';
  }
  Dorothy.programName = RegExp.$1;

  if (!/^\/\/version=(.*?)$/m.test (head) || RegExp.$1 == '') {
    return 'error>version が未定義。';
  }
  Dorothy.programVersion = RegExp.$1;

  Dorothy.stealth = 0;
  if (/^\/\/stealth=(.*?)$/m.test (head)) {
    Dorothy.stealth = RegExp.$1;
  }

  return null;
};

// プログラムを読み込んで解析する
Dorothy.loadProgram = function (file) {
  Dorothy.program = file_load ('program\' + file + '.dms');

  var s = Dorothy.validateProgram (Dorothy.program);
  if (s) {
    println (s);
    return false;
  }

  return true;
};


// common の形式が正しいか調べる
Dorothy.validateCommon = function (name, src) {
  var obj = Dorothy.common [name] = { };

  if (!/^\/\/version=(.*?)$/m.test (src)) {
    return 'version が記載されていません';
  }
  obj.version = RegExp.$1;

  if (!/^\/\/caption=(.*?)$/m.test (src)) {
    return 'caption が記載されていません';
  }
  obj.caption = RegExp.$1;

  return null;
};


// (Dorothy2R 拡張) スレッドごとのデータ保存
Dorothy.getThreadStorage = function () {
  if (!Dorothy.hasKey ('_threadStorage')) {
    common_load ('threadstorage');

    // テンポラリディレクトリを作成
    var tmpdir = new Directory (Dorothy.temp);
    tmpdir.exists () || tmpdir.make ();

    var ini = Dorothy.temp + 'thread_storage.ini';
    Dorothy._threadStorage = new ThreadStorage (ini);
  }

  return Dorothy._threadStorage;
};


// Dorothy.init で Dorothy オブジェクトに定義する関数群
//   string で定義する(\ のエスケープに注意)。
Dorothy._d = [ ];


// (Dorothy2R 拡張) ファイルをテキストエディタで開く
Dorothy._d.push ({ n: 'edit', f: "function (file) {
  var god = typeof Irvine == 'object';

  var ed = god ? Irvine.GetOptionData ('general', 'editor') : optiondata.Editor;
  var opt = god ? Irvine.GetOptionData ('general', 'editoroption') : optiondata.EditorOption;

  if (!ed) {
    ed = 'notepad.exe';
    opt = '';
  }

  return Win32.shellExecute ('open', '\"' + ed + '\"', opt + '\"' + file + '\"');
}" });


// (Dorothy2R 拡張) 保存フォルダ名を取得する
Dorothy._d.push ({ n: 'getSaveFolder', f: "function () {
  var ip = item.folder;
  if (/^[a-z]:/i.test (ip)) {
    // アイテム設定が絶対パス
    return (new Directory (ip)).path;
  }

  var fp = folderdata.folder;
  if (/^[a-z]:/i.test (fp)) {
    // フォルダ設定が絶対パス
    return (new Directory ((new Directory (fp)).path + ip)).path;
  }

  var ini = new Ini ((new irvinePath ()).queue + 'queue.ini');
  var qp = ini.read ('queue', 'folder', '');
  return (new Directory (new Directory (qp + fp)).path + ip).path;
}" });


// (Dorothy2R 拡張) 保存フォルダ内にフォルダを作成する
Dorothy._d.push ({ n: 'createSaveFolder', f: "function (path) {
  if (!/^[a-z]:/i.test (path)) {
    // 相対パス
    path = Dorothy.getSaveFolder () + path;
  }

  var d = new Directory (path);
  if (!d.exists()) {
    println ('new directory>' + d.path);
    d.make ();
  }

  return d.path;
}" });


// (Dorothy2R 拡張) item.filename を返す
Dorothy._d.push ({ n: 'getItemFilename', f: "function () {
  // '[[rename]]' が含まれている場合は指定されていないものと見なす
  // if (item.filename.indexOf ('[[rename]]') >= 0) {
  //   reutrn '';
  // }

  return item.filename;
}" });


// (Dorothy2R 拡張) URL を設定する
Dorothy._d.push ({ n: 'setUrl', f: "function (url, referer) {
  urlinfo.url = url;
  headers.Host = (new URL (url)).host;
  headers.Cookie = '';

  headers.Referer = referer || '';
}" });


// (Dorothy2R 拡張) ファイル名を設定する
Dorothy._d.push ({ n: 'setFilename', f: "function (filename) {
  println ('new filename>' + filename);
  item.filename = filename;
}" });


// Dorothy 初期化
Dorothy.init = function (o) {
  // Dorothy2 本体のバージョン番号
  Dorothy.version = o.version;

  var ev = Dorothy._eval = o.eval;

  // 関数を定義
  function define (key, target, targetDot) {
    var funcs = Dorothy [key];
    Dorothy.removeKey (key);

    for (var i = 0; i < funcs.length; ++i) {
      var nf = funcs [i];
      funcs [i] = null;

      var name = nf.n;
      var f = nf.f;

      if (typeof f === 'string') {
        ev (targetDot + name + '=' + f);
      }
      else {
        target [name] = f;
      }
    }
  }
  define ('_d', Dorothy, 'Dorothy.');

  // 不要になったプロパティを削除
  Dorothy.removeKey ('init');
};


// Dorothy2R_ini.dms を読み込んで実行する
Dorothy.loadDorothyIni = function () {
  var f = new File (WScript.Path + 'scripts\Dorothy2R_ini.dms');

  function err (s) {
    alert (f.path + ' ' + s + "\n\n「Dorothy2R 設定」で設定を保存して下さい。");
    exit ();
  }
  if (!f.exists ()) {
    err ('がありません。');
  }
  if (!f.length) {
    err ('が空です。');
  }

  try {
    f.open ('r');
    eval ('(function(){' + f.read () + '})()');
    f.close ();
  }
  catch (e) {
    f.close ();
    err (e);
  }
};


//----------------------------- OnHttpRequest ------------------------------

/*
  HTTP(S)リクエストイベント
  ※synchronize=1 以外の場合にIrvine.Api/UrlManager/Folder/Itemを使用しないでください
  ※ダイアログを呼びださないでください
*/
function OnHttpRequest (urlinfo, headers, item, folderdata, optiondata) {
  // Dorothy オブジェクト初期化
  function ev () { eval (arguments [0]); }
  Dorothy.loadDorothyIni ();
  Dorothy.init ({ version: '0.32', eval: ev });


  // Dorothy2\program\*.dms から使える機能を定義

  // Irvine にアイテムの実行をリトライさせる
  // (実際にリトライするかどうかはフォルダ設定による)
  function retry () {
    for (var i = 0; i < arguments.length; i++) {
      println (arguments [i]);
    }

    urlinfo.url = '';
    urlinfo.proxy = '';
    return false;
  }


  // この関数内で使う変数、関数等のコンテナ
  var _ = { };


  // Dorothy.fileName を item.filename に設定する
  // [[cd=...]] [[md=...]] を解釈する。
  _.parseFilenameCommand = function (filename) {

    // [[md=...]] 指定フォルダを作成して保存
    // [[cd=...]] 指定フォルダに保存(md と同じ)
    function md (path) {
      if (!path) {
        return;
      }

      path = Dorothy.createSaveFolder (path.trim ());
      if (path) {
        item.folder = path;
      }
    }

    item.filename = filename.replace (/\[\[(cd|md)=(.+?)\]\]/g, function (s, p1, p2) {
      md (p2.trim ());
    });
  };


  // Dorothy.fileName の設定内容に応じて処理
  _.parseFilename = function () {
    var filename = Dorothy.fileName;
    if (filename == '') {
      // Dorothy.fileName 指定なし
      return;
    }

    println ('new fileName>' + filename);

    // Dorothy.fileName == 'remove' による自アイテム削除
    if (filename == 'remove') {
      if (Dorothy.nulUrl) {
        // nulUrl/nulProxy を使って自動削除
        headers.Host = (new URL (Dorothy.nulUrl)).host;
        urlinfo.url = Dorothy.nulUrl;
        urlinfo.proxy = Dorothy.nulProxy;
      }
      else {
        // Dorothy2R_b.dms に削除させる
        Dorothy.getThreadStorage ().setItem ('Remove', 'true');
      }
      return;
    }

    // item.filename が指定されていればそちらを優先する
    var f = Dorothy.getItemFilename ();
    if (f) {
      var ext = (new File (filename)).extractExt ();
      if ((new File (f)).extractExt () == '' && ext) {
        // 拡張子がなければ、Dorothy.fileName から拡張子をコピーする。
        item.filename += ext;
      }
      return;
    }

    // Dorothy.fileName のファイル名コマンドを実行、item.filename に設定
    _.parseFilenameCommand (filename);
  };


  // URL 修正
  //  new url>http://〜 → http://〜
  //  ttp://〜 → http://〜
  _.fixUrl = function () {
    function fix (url) {
      return url.replace (/^new url>/, '').replace (/^(ttps?:)/, 'h$1');
    }

    var u = fix (item.url);
    if (item.url != u) {
      item.url = u;
    }

    u = fix (urlinfo.url);
    if (urlinfo.url != u) {
      urlinfo.url = u;
    }
  };


  // メイン処理

  println ('Dorothy2R version ' + Dorothy.rVersion + ' OnHttpRequest (based on ' + Dorothy.version + ')');

  Dorothy.fileNameKey = item.url;
  Dorothy.fileName = '';

  _.fixUrl ();

  if (urlinfo.proxy == '' && folderdata.UseHttpProxy && !folderdata.RandomHttpProxy) {
    urlinfo.proxy = folderdata.HttpProxy;
  }

  Dorothy.oldUrl = urlinfo.url;
  Dorothy.continueCount = 0;
  Dorothy.end = false;

  _.matchCount = 0;
  _.matcher = Dorothy.createProgramMatcher ();

  for (;;) {
    Dorothy.continue = false;
    Dorothy.cancel = true;

    if (!_.matcher.find (urlinfo.url, item)) {
      // 対応するプログラムが見つからない
      break;
    }

    // URL に対応するプログラムが見つかった

    // 初回のみ、temp フォルダをカスタマイズしている場合は表示する
    if (_.matchCount++ == 0 && Dorothy.temp != (Dorothy.path + 'temp\')) {
      println ('Dorothy.temp = ' + Dorothy.temp);
    }

    // .dms を読み込む
    if (!Dorothy.loadProgram (Dorothy.matchFile)) {
      exit ();
    }
    if (Dorothy.stealth != 1) {
      println ('match>' + Dorothy.programName + ' (' + Dorothy.programVersion + ')' + ' by '+ Dorothy.author);
    }

    // 読み込んだ .dms を実行する
    try {
      Dorothy.return = eval (Dorothy.program) ();
    }
    catch (e) {
      println ('error>' + e);
      exit ();
    }

    // Dorothy.continue .end .cancel に応じて次の処理を振り分ける

    if (Dorothy.continue) {
      // .continue = false → true に変更された場合: 優先度トップから再実行する
      ++Dorothy.continueCount;
      _.matcher.rewind ();
      continue;
    }

    if (Dorothy.end) {
      // .end = false → true に変更された場合: 終了
      Dorothy.cancel = false;
    }
    if (!Dorothy.cancel) {
      // .cancel = true → false に変更された場合: 終了
      break;
    }

    // .cancel = true のままなら、次の優先度のプログラムを実行する
  }

  if (!_.matchCount) {
    println ('対応する Dorothy2 スクリプトがありません。');
  }


  // urlinfo.url が変更されていたら表示
  if (Dorothy.oldUrl != urlinfo.url && urlinfo.url != '') {
    println ('new url>' + urlinfo.url);
  }

  // 保存ファイル名の処理
  _.parseFilename ();


  // urlinfo と headers を置換する
  return true;
}


// EOF
