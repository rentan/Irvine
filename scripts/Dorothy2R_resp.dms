/*
スクリプト初期化データ
guid={F984DA71-6062-4DA1-9A75-C326B24B1647}
caption=Dorothy2R OnHttpResponse
version=20160208
hint=Dorothy2R OnHttpResponse
event=OnHttpResponse
match=
author=rentan
synchronize=0
*/

/*
Copyright (C) 2014-2016 rentan at rentan.org

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


//--------------------------- ThreadStorageResp ----------------------------
// スレッドストレージ関係の処理


// コンストラクタ
function ThreadStorageResp (util) {
  this._util = util;
  this._storage = Dorothy.getThreadStorage ();
}


// スレッドストレージからデータを読み込む
ThreadStorageResp.prototype.getItem = function (key) {
  return this._storage.getItem (key);
};


// スレッドストレージからデータを読み込んで削除する
ThreadStorageResp.prototype.getAndRemoveItem = function (key) {
  var v = this._storage.getItem (key);
  if (v != null) {
    this._storage.removeItem (key);
  }
  return v;
};


// header.HHH=VVV データがあればヘッダに設定する
ThreadStorageResp.prototype._writeHeader = function (name) {
  var key = 'headers.' + name;

  var v = this.getAndRemoveItem (key);
  if (v == null) {
    return false;
  }

  return this._util.setHeader (name, v);
};


// Content-Disposition のファイル名を Shift_JIS に変換する
ThreadStorageResp.prototype._filenameToSJIS = function () {
  var v = this.getAndRemoveItem ('tosjis.Content-Disposition');
  if (!/^true(;|$)/.test (v)) {
    return false;
  }

  var name = 'content-disposition';
  var cd = this.getHeader (name);
  if (!cd) {
    return false;
  }

  var nbArgs = {
    zen2han: /;Zen2Han=true(;|$)/.test (v)
  };

  var sj = cd.replace (/(filename=")([^"]+)(")/, function (s, p1, p2, p3) {
    common_load ('namebuilder', 'utf8');

    var f = (new Utf8 (p2)).toSJIS ();
    f = (new NameBuilder (nbArgs)).normalize (f);

    return p1 + f + p3;
  });

  if (sj == cd) {
    return false;
  }

  return this._util.setHeader (name, sj);
};


// メイン処理
ThreadStorageResp.prototype.process = function () {
  var r = false;

  r = this._writeHeader ('last-modified') || r;
  r = this._filenameToSJIS () || r;

  return r;
};


//------------------------------- OptionResp -------------------------------
// オプション関係の処理


// コンストラクタ
function OptionResp (util) {
  this._util = util;
}


// lastmodified
OptionResp.prototype._lastModified = function () {
  var lm = Dorothy.getOption (Dorothy.getLastModifiedOptionName ());
  if (lm == null) {
    return false;
  }

  return this._util.setHeader ('last-modified', lm);
};


// メイン処理
OptionResp.prototype.process = function () {
  return this._lastModified ();
};


//----------------------------- OnHttpResponse -----------------------------
// HTTP(S)レスポンスイベント

function OnHttpResponse (urlinfo, headers, item, folderdata, optiondata) {
  // ステータスが 200 OK 以外なら実行しない
  if (urlinfo.StatusCode != 200) {
    return false;
  }

  // Dorothy2R_a.dms 実行
  (function () {
    var f = new File (WScript.Path + 'scripts\Dorothy2R_a.dms');
    try {
      f.open ('r');
      eval ('(function(){' + f.read () + '})()');
      f.close ();
    }
    catch (e) {
      f.close ();
      alert (e + "\n" + f.path);
      exit ();
    }
  }) ();


  // Dorothy オブジェクト初期化
  function ev () { eval (arguments [0]); }
  Dorothy.loadDorothyIni ();
  Dorothy.init ({ version: 'xxxx', eval: ev });


  // メイン処理
  println ('Dorothy2R version ' + Dorothy.rVersion + ' OnHttpResponse');

  var util = {
    getHeader: function (name) {
      return headers.hasKey (name) ? headers [name] : null;
    },

    setHeader: function (name, value) {
      println ('headers>' + name + ': ' + value);
      headers [name] = value;
      return true;
    }
  };

  var tsr = new ThreadStorageResp (util).process ();
  var cmt = new OptionResp (util).process ();

  return tsr || cmt;
}


// EOF
