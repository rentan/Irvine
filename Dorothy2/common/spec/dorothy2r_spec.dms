//Dorothy2
//caption=Dorothy2R spec
//version=20140908.0
//hint=http://yasmine.dorothy.test/common/spec/dorothy2r_spec.dms
//match=
//author=rentan
//path=common\spec
//end

//†xyzzy文字化け回避


/*
Copyright (C) 2014 rentan at rentan.org

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


// joint.call() または joint.apply() は
// joint() 自体の動作モードが変更されてしまうため使用禁止


describe ('joint()', function () {
  cases ([
    // [ separator, strings... ], result
    [ [ '' ], '' ],
    [ [ '-' ], '' ],

    [ [ '', '' ], '' ],
    [ [ '-', '' ], '' ],
    [ [ '', 'a' ], 'a' ],
    [ [ '-', 'a' ], 'a' ],

    [ [ '', '', '' ], '' ],
    [ [ '-', '', '' ], '' ],
    [ [ '', 'a', 'b' ], 'ab' ],
    [ [ '-', 'a', 'b' ], 'a-b' ],
    [ [ '', 'a', '' ], 'a' ],
    [ [ '', '', 'b' ], 'b' ],
    [ [ '-', 'a', '' ], 'a' ],
    [ [ '-', '', 'b' ], 'b' ],

    [ [ '', '', '', '' ], '' ],
    [ [ '-', '', '', '' ], '' ],
    [ [ '', 'a', '', '' ], 'a' ],
    [ [ '-', 'a', '', '' ], 'a' ],
    [ [ '', '', 'b', '' ], 'b' ],
    [ [ '-', '', 'b', '' ], 'b' ],
    [ [ '', '', '', 'c' ], 'c' ],
    [ [ '-', '', '', 'c' ], 'c' ],

    [ [ '', 'a', 'b', '' ], 'ab' ],
    [ [ '-', 'a', 'b', '' ], 'a-b' ],
    [ [ '', 'a', '', 'c' ], 'ac' ],
    [ [ '-', 'a', '', 'c' ], 'a-c' ],
    [ [ '', '', 'b', 'c' ], 'bc' ],
    [ [ '-', '', 'b', 'c' ], 'b-c' ],

    [ [ '', 'a', 'b', 'c' ], 'abc' ],
    [ [ '-', 'a', 'b', 'c' ], 'a-b-c' ]
  ])
  .it ('[ [ separator, strings... ], result ]', function (args, result) {
    var r = (args.length == 1) ? joint (args [0])
          : (args.length == 2) ? joint (args [0], args [1])
          : (args.length == 3) ? joint (args [0], args [1], args [2])
          : (args.length == 4) ? joint (args [0], args [1], args [2], args [3])
          : '未対応の引数長です: ' + args;

    expect (r).toBe (result);
  });
});


describe ('Dorothy.createProgramMatcher', function () {
  it ('returns matcher object', function () {
    expect (Dorothy.hasKey ('createProgramMatcher')).toBe (true);

    var m = Dorothy.createProgramMatcher ();

    expect (typeof m).toBe ('object');
    expect (m.hasKey ('find')).toBe (true);
    expect (m.hasKey ('rewind')).toBe (true);
  });
});


var matchList1 = [
  { f: 'foo', re: /^http:\/\/example\.com\/foo/ },
  { f: 'bar', re: /^http:\/\/example\.com\// }
];

var matchList2 = [
  { f: 'aaa', re: /./ },
  { f: 'bbb', re: /^h/ }
];

describe ('matcher.find', function () {
  var matchListBackup;

  beforeEach (function () {
    matchListBackup = Dorothy.matchList;
  });

  afterEach (function () {
    Dorothy.matchList = matchListBackup;
    matchListBackup = null;
  });

  it ('returns null if no program matched', function () {
    var m, found;

    Dorothy.matchList = [ ];
    m = Dorothy.createProgramMatcher ();
    found = m.find ('http://example.jp/');
    expect (found).toBeNull ();

    expect (Dorothy.matchFile).toBe ('');
    expect (Dorothy.matchType).toBe ('');
    expect (Dorothy.userPath).toBeNull ();
    expect (Dorothy.userIniPath).toBeNull ();

    Dorothy.matchList = matchList1;
    m = Dorothy.createProgramMatcher ();
    found = m.find ('http://example.jp/');
    expect (found).toBeNull ();
  });

  it ('returns matched program', function () {
    var m, found;

    Dorothy.matchList = matchList1;
    m = Dorothy.createProgramMatcher ();
    found = m.find ('http://example.com/foo');

    expect (found).toBe (matchList1 [0]);

    expect (Dorothy.matchFile).toBe ('foo');
    expect (Dorothy.matchType).toBe ('url');
    expect (Dorothy.userPath).toBe (Dorothy.path + 'user\foo\');
    expect (Dorothy.userIniPath).toBe (Dorothy.userPath + 'foo.ini');

    found = m.find ('http://example.com/');
    expect (found).toBe (matchList1 [1]);

    found = m.find ('http://example.com/');
    expect (found).toBeNull ();
  });

  it ('ignores /./ program if created with ignoreDot=true', function () {
    var m, found;

    Dorothy.matchList = matchList2;
    m = Dorothy.createProgramMatcher (true);
    found = m.find ('http://example.com/');

    expect (found).toBe (matchList2 [1]);
  });
});


describe ('matcher.rewind', function () {
  var matchListBackup;

  beforeEach (function () {
    matchListBackup = Dorothy.matchList;
  });

  afterEach (function () {
    Dorothy.matchList = matchListBackup;
    matchListBackup = null;
  });

  it ('change index to 0', function () {
    var m, found;

    Dorothy.matchList = matchList1;
    m = Dorothy.createProgramMatcher ();
    found = m.find ('http://example.com/');
    expect (found).toBe (matchList1 [1]);

    m.rewind ();
    found = m.find ('http://example.com/foo');
    expect (found).toBe (matchList1 [0]);
  });
});


// EOF
