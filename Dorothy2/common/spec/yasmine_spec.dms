//Dorothy2
//caption=yasmine spec
//version=20160216.0
//hint=http://yasmine.dorothy.test/common/spec/yasmine_spec.dms
//match=
//author=rentan
//path=common\spec
//end

//Åıxyzzyï∂éöâªÇØâÒî


/*
Copyright (C) 2014,2015 rentan at rentan.org
Copyright (C) 2016 wan at thewanwan111@gmail.com

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


/*
describe ('missmatch', function () {
  it ('causes fail', function () {
    expect (1).toBe (2);
    expect (function () { throw; }).not.toThrow ();
  });
});
*/


xdescribe ('xdescribe causes pending', function () {
  it ('it in xdescribe does not called', function () {
    alert ('it in xdescribe does not called');
    throw;
  });
});


describe ('it', function () {
  it ('without function causes pending');
});


describe ('jasmine.any()', function () {
  it ('compares object type', function () {
    expect (1).toEqual (jasmine.any (Number));
    expect (function () { }).toEqual (jasmine.any (Function));

    expect ('foo').not.toEqual (jasmine.any (Number));
  });
});


describe ('jasmine.objectContaining()', function () {
  function ContainTest(){this.a = 1;}
  ContainTest.prototype.b = 2;
  
  function ContainTest2(){this.a = 1;}
  ContainTest2.prototype.b = 2;

  it ('compares object properties', function () {
    expect ({ a: 1 }).toEqual (jasmine.objectContaining ({ a: 1 }));
    expect ({ a: 1, b: 2 }).toEqual (jasmine.objectContaining ({ a: 1, b: 2 }));

    expect ({ }).not.toEqual (jasmine.objectContaining ({ x: 0 }));

    var o = new ContainTest();
    var o2 = new ContainTest2();
    expect(o).toEqual(jasmine.objectContaining({a: 1, b: 2}));
    expect({a:1, b:2}).toEqual(jasmine.objectContaining(o));
    expect({a:1, b:0}).not.toEqual(jasmine.objectContaining(o));
    expect(o).toEqual(jasmine.objectContaining(o2));
  });

  it('compares prototype', function(){
    expect(ContainTest.prototype).toEqual(jasmine.objectContaining(ContainTest2.prototype));
  });

  it('compares Array', function(){
    var arr = ['a', true, false, null, 123];
    var arr2 = ['a', true, false, null, 123];
    expect(arr).toEqual(arr2);
    expect(arr).toEqual(jasmine.objectContaining(arr2));
    
    arr2.abc = 'abc';
    expect(arr).not.toEqual(arr2);
    expect(arr).not.toEqual(jasmine.objectContaining(arr2));
    expect(arr2).toEqual(jasmine.objectContaining(arr));
    
    arr.abc = 'abc';
    expect(arr).toEqual(arr2);
    expect(arr).toEqual(jasmine.objectContaining(arr2));
    
    arr = [1, 2, 3];
    arr2 = [3, 2, 1];
    expect(arr).not.toEqual(arr2);
    expect(arr).not.toEqual(jasmine.objectContaining(arr2));
  });

  it('compares IrvineFolderData', function(){
    var folderdata2 = new IrvineFolderData;
    expect(folderdata).not.toEqual(folderdata2);
    for(var i in folderdata){
      if(typeof folderdata[i] != 'undefined') folderdata2[i] = folderdata[i];
    }
    expect(folderdata).toEqual(jasmine.objectContaining(folderdata2));
    expect(folderdata).toEqual(folderdata2);
  });
});


describe ('NaN', function () {
  it ('is falsy', function () {
    expect (NaN).toBeFalsy ();
    expect (NaN).not.toBeTruthy ();
  });

  it ('is the same as NaN', function () {
    expect (NaN).toBe (NaN);
  });
});


describe ('Number', function () {
  it ('int and double is same type', function () {
    expect (1).toBe (1.0);
    expect (parseInt ('1')).toBe (parseFloat ('1'));

    expect (1).not.toBe (2.0);
    expect (parseInt ('1')).not.toBe (parseFloat ('2'));
  });
});


describe ('object', function () {
  it ('equals to other object', function () {
    expect ({ x: 1 }).toEqual ({ x: 1 });
    expect ({ x: 1, y: 'foo' }).toEqual ({ x: 1, y: 'foo' });

    expect ({ x: 1 }).not.toEqual ({ x: 9 });
    expect ({ x: 1, y: 'foo' }).not.toEqual ({ x: 1, y: 'bar' });
    expect ({ x: 1 }).not.toEqual ({ x: 1, y: 'foo' });
  });
});


describe ('parameterized test', function () {
  it ('can execute it before cases', function () {
    expect ('false').toBeTruthy ();
  });

  cases ([
    [ 2, 3, 5 ]
  ]).it ('cases has .it', function (a, b, c) {
    expect (a + b).toBe (c);
  });

  cases ([
    [ 2, 3, 6 ],
    [ 4, 5, 20 ]
  ])
  .it ('cases.it tests one by one', function (a, b, c) {
    expect (a * b).toBe (c);
  });

  cases ([
    [ 1, 2, 3 ]
  ])
  .xit ('cases.xit pends', function (a, b, c) {
    expect (a - b).toBe (c);
  });

  it ('can execute it after cases', function () {
    expect (null).toBeFalsy ();
  });
});


describe ('comparing arrays', function () {
  it ('compares each elements', function () {
    expect ([ 'aaa', 'bbb' ]).toEqual ([ 'aaa', 'bbb' ]);
    expect ([ { a: 'aaa' }, { b: 'bbb' } ]).toEqual ([ { a: 'aaa' }, { b: 'bbb' } ]);

    expect ([ 'aaa', 'bbb' ]).not.toEqual ([ 'aaa', 'zzz' ]);
    expect ([ 'aaa', 'bbb' ]).not.toEqual ([ 'xxx', 'bbb' ]);
    expect ([ { a: 'aaa' }, { b: 'bbb' } ]).not.toEqual ([ { a: 'xxx' }, { b: 'yyy' } ]);
  });
});


describe ('Yasmine#_stringify', function () {
  var ya = new Yasmine ();
  var u = { u }.u;

  cases ([
    // [ value, string ]
    [ u, 'undefined' ],
    [ [ u ], '[undefined]' ],
    [ { x: u }, '{x:undefined}' ],

    [ Number.POSITIVE_INFINITY, 'Infinity' ],
    [ Number.NEGATIVE_INFINITY, '-Infinity' ],
    [ [ Number.POSITIVE_INFINITY ], '[Infinity]' ]
  ])
  .it ('returns stringified value [ value, string ]', function (value, s) {
    expect (ya._stringify (value)).toBe (s);
  });
});


// EOF
