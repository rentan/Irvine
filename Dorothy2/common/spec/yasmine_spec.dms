//Dorothy2
//caption=yasmine spec
//version=20160325.0
//hint=http://yasmine.dorothy.test/common/spec/yasmine_spec.dms
//match=
//author=rentan
//path=common\spec
//end

//Åıxyzzyï∂éöâªÇØâÒî


/*
Copyright (C) 2014-2016 rentan at rentan.org
Copyright (C) 2016 wan at thewanwan111@gmail.com

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


var UNDEFINED = { u }.u;


/*
describe ('missmatch', function () {
  it ('causes fail', function () {
    expect (1).toBe (2);
    expect (function () { throw; }).not.toThrow ();
  });
});
*/


xdescribe ('xdescribe causes pending', function () {
  it ('it in xdescribe does not called', function () {
    alert ('it in xdescribe does not called');
    throw;
  });
});


describe ('it', function () {
  it ('without function causes pending');
});


describe ('jasmine.any()', function () {
  it ('compares object type', function () {
    expect (1).toEqual (jasmine.any (Number));
    expect (function () { }).toEqual (jasmine.any (Function));

    expect ('foo').not.toEqual (jasmine.any (Number));
  });
});


describe ('jasmine.objectContaining()', function () {
  function ContainTest1 () {
    this.a = 1;
  }
  ContainTest1.prototype.b = 2;

  function ContainTest2 () {
    this.a = 1;
  }
  ContainTest2.prototype.b = 2;

  it ('compares object properties', function () {
    expect ({ a: 1 }).toEqual (jasmine.objectContaining ({ a: 1 }));
    expect ({ a: 1, b: 2 }).toEqual (jasmine.objectContaining ({ a: 1, b: 2 }));

    expect ({ }).not.toEqual (jasmine.objectContaining ({ x: 0 }));

    var o1 = new ContainTest1 ();
    var o2 = new ContainTest2 ();
    expect (o1).toEqual (jasmine.objectContaining ({ a: 1, b: 2 }));
    expect ({ a:1, b:2 }).toEqual (jasmine.objectContaining (o1));
    expect ({ a:1, b:0 }).not.toEqual (jasmine.objectContaining (o1));
    expect (o1).toEqual (jasmine.objectContaining (o2));
  });

  it ('compares prototype', function(){
    expect (ContainTest1.prototype).toEqual (jasmine.objectContaining (ContainTest2.prototype));
  });

  it ('compares Array', function () {
    var arr1 = [ 'a', true, false, null, 123 ];
    var arr2 = [ 'a', true, false, null, 123 ];
    expect (arr1).toEqual (arr2);
    expect (arr1).toEqual (jasmine.objectContaining (arr2));

    arr2.abc = 'abc';
    expect (arr1).not.toEqual (arr2);
    expect (arr1).not.toEqual (jasmine.objectContaining (arr2));
    expect (arr2).toEqual (jasmine.objectContaining (arr1));

    arr1.abc = 'abc';
    expect (arr1).toEqual (arr2);
    expect (arr1).toEqual (jasmine.objectContaining (arr2));

    arr1 = [1, 2, 3];
    arr2 = [3, 2, 1];
    expect (arr1).not.toEqual (arr2);
    expect (arr1).not.toEqual (jasmine.objectContaining (arr2));
  });

  it ('compares IrvineFolderData', function () {
    var folderdata2 = new IrvineFolderData ();
    expect (folderdata).not.toEqual (folderdata2);

    for (var i in folderdata) {
      if (typeof folderdata [i] != 'undefined') {
        folderdata2[i] = folderdata[i];
      }
    }

    expect (folderdata).toEqual (jasmine.objectContaining (folderdata2));
    expect (folderdata).toEqual (folderdata2);
  });
});


describe ('parameterized test', function () {
  it ('can execute it before cases', function () {
    expect ('false').toBeTruthy ();
  });

  cases ([
    [ 2, 3, 5 ]
  ]).it ('cases has .it', function (a, b, c) {
    expect (a + b).toBe (c);
  });

  cases ([
    [ 2, 3, 6 ],
    [ 4, 5, 20 ]
  ])
  .it ('cases.it tests one by one', function (a, b, c) {
    expect (a * b).toBe (c);
  });

  cases ([
    [ 1, 2, 3 ]
  ])
  .xit ('cases.xit pends', function (a, b, c) {
    expect (a - b).toBe (c);
  });

  it ('can execute it after cases', function () {
    expect (null).toBeFalsy ();
  });
});


describe ('expect().toBe()', function () {
  var object_o = { };
  var String_foo = new String ('foo');
  var StringBuffer_foo = new StringBuffer ('foo');

  cases ([
    // expect, actual

    [ null, null ],
    [ UNDEFINED, UNDEFINED ],

    // object
    [ object_o, object_o ],

    // number
    [ 1, 1.0 ],
    [ parseInt ('1'), parseFloat ('1') ],

    // string
    [ 'foo', 'foo' ],

    // String
    [ String_foo, String_foo ],

    // StringBuffer
    [ StringBuffer_foo, StringBuffer_foo ]

  ])
  .it ('expect().toBe() [ expect, actual ]', function (ex, ac) {
    expect (ex).toBe (ac);
  });

  cases ([
    // expect, actual

    [ null, UNDEFINED ],
    [ UNDEFINED, null ],

    // object
    [ { }, { } ],

    // number
    [ 1, 2.0 ],
    [ parseInt ('1'), parseFloat ('2') ],

    // Number
    [ new Number (1), 1 ],
    [ new Number (1), new Number (1) ],
    [ NaN, NaN ],

    // string
    [ 'foo', 'bar' ],

    // String
    [ String, 'foo' ],
    [ String, new String ('foo') ],
    [ String, new StringBuffer ('foo') ],
    [ String, StringBuffer ],

    [ new String ('foo'), 'foo' ],
    [ new String ('foo'), new String ('foo') ],
    [ new String ('foo'), new String ('bar') ],
    [ new String ('foo'), new StringBuffer ('foo') ],

    // StringBuffer
    [ StringBuffer, 'foo' ],
    [ StringBuffer, new String ('foo') ],
    [ StringBuffer, new StringBuffer ('foo') ],

    [ new StringBuffer ('foo'), 'foo' ],
    [ new StringBuffer ('foo'), new String ('foo') ],
    [ new StringBuffer ('foo'), new StringBuffer ('foo') ],
    [ new StringBuffer ('foo'), new StringBuffer ('bar') ]

  ])
  .it ('expect().not.toBe() [ expect, not_actual ]', function (ex, ac) {
    expect (ex).not.toBe (ac);
  });
});


describe ('expect().toEqaul()', function () {
  cases ([
    // expect, actual

    [ null, null ],
    [ UNDEFINED, UNDEFINED ],

    // object
    [ { x: 1 }, { x: 1 } ],
    [ { x: 1, y: 'foo' }, { x: 1, y: 'foo' } ],

    // number
    [ NaN, NaN ],

    // array
    [ [ 'aaa', 'bbb' ], [ 'aaa', 'bbb' ] ],
    [ [ { a: 'aaa' }, { b: 'bbb' } ], [ { a: 'aaa' }, { b: 'bbb' } ] ],

    // string
    [ 'foo', 'foo' ],

    // String
    [ new String ('foo'), 'foo' ],
    [ new String ('foo'), new String ('foo') ],

    // StringBuffer
    [ new StringBuffer ('foo'), new StringBuffer ('foo') ]

  ])
  .it ('expect().toEqual() [ expect, actual ]', function (ex, ac) {
    expect (ex).toEqual (ac);
  });

  cases ([
    // expect, actual

    [ null, UNDEFINED ],
    [ UNDEFINED, null ],

    // object
    [ { x: 1 }, { x: 9 } ],
    [ { x: 1, y: 'foo' }, { x: 1, y: 'bar' } ],
    [ { x: 1 }, { x: 1, y: 'foo' } ],

    // array
    [ [ 'aaa', 'bbb' ], [ 'aaa', 'zzz' ] ],
    [ [ 'aaa', 'bbb' ], [ 'xxx', 'bbb' ] ],
    [ [ { a: 'aaa' }, { b: 'bbb' } ], [ { a: 'xxx' }, { b: 'yyy' } ] ],

    // string
    [ 'foo', 'bar' ],

    // String
    [ new String ('foo'), 'bar' ],
    [ new String ('foo'), new String ('bar') ],
    [ new String ('foo'), new StringBuffer ('foo') ],

    // StringBuffer
    [ new StringBuffer ('foo'), 'foo' ],
    [ new StringBuffer ('foo'), new String ('foo') ],
    [ new StringBuffer ('foo'), new StringBuffer ('bar') ]

  ])
  .it ('expect().not.toEqual() [ expect, not_actual ]', function (ex, ac) {
    expect (ex).not.toEqual (ac);
  });
});


describe ('expect().toBeUndefined()', function () {
  it ('expect().toBeUndefined()', function () {
    expect (UNDEFINED).toBeUndefined ();
  });
});


describe ('expect().toBeNaN()', function () {
  it ('expect().toBeNaN()', function () {
    expect (NaN).toBeNaN ();
  });

  cases ([
    null,
    true,
    false,
    { },
    0,
    new Number (0),
    Number.POSITIVE_INFINITY,
    '',
    'NaN'
  ])
  .it ('expect().not.toBeNaN()', function (value) {
    expect (value).not.toBeNaN ();
  });
});


describe ('expect().toBeTruthy(), .toBeFalsy()', function () {
  var trues = [
    true,
    { },
    1,
    'foo'
  ];

  var falses = [
    UNDEFINED,
    null,
    false,
    0,
    '',
    NaN
  ];

  cases (trues)
  .it ('expect().toBeTruthy()', function (value) {
    expect (value).toBeTruthy ();
  });

  cases (falses)
  .it ('expect().not.toBeTruthy()', function (value) {
    expect (value).not.toBeTruthy ();
  });

  cases (falses)
  .it ('expect().toBeFalsy()', function (value) {
    expect (value).toBeFalsy ();
  });

  cases (trues)
  .it ('expect().not.toBeFalsy()', function (value) {
    expect (value).not.toBeFalsy ();
  });
});


describe ('Yasmine#_stringify', function () {
  var ya = new Yasmine ();

  cases ([
    // [ value, string ]
    [ UNDEFINED, 'undefined' ],
    [ [ UNDEFINED ], '[undefined]' ],
    [ { x: UNDEFINED }, '{x:undefined}' ],

    [ Number.POSITIVE_INFINITY, 'Infinity' ],
    [ Number.NEGATIVE_INFINITY, '-Infinity' ],
    [ [ Number.POSITIVE_INFINITY ], '[Infinity]' ]
  ])
  .it ('returns stringified value [ value, string ]', function (value, s) {
    expect (ya._stringify (value)).toBe (s);
  });
});


// EOF
