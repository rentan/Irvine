//Dorothy2
//caption=Util spec
//version=20160411.0
//hint=http://yasmine.dorothy.test/common/spec/rutil_spec.dms
//match=
//author=rentan
//path=common\spec
//end

//Åıxyzzyï∂éöâªÇØâÒî


/*
Copyright (C) 2014-2016 rentan at rentan.org

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


common_load ('rutil');


describe ('Util.get_option()', function () {
  var backupItemComment = item.Comment;
  var backupFolderdataPost = folderdata.Post;

  afterEach (function () {
    item.Comment = backupItemComment;
    folderdata.Post = backupFolderdataPost;
  });

  it ('no option string', function () {
    expect (typeof Util.get_option).toBe ('function');

    item.Comment = '';
    folderdata.Post = '';

    expect (Util.get_option ('*=NoneExistOptionName=*')).toBeNull ();
  });

  it ('get option', function () {
    item.Comment = 'foo=123';
    folderdata.Post = 'foo=abc;bar=xyz';

    expect (Util.get_option ('*=NoneExistOptionName=*')).toBeNull ();
    expect (Util.get_option ('foo')).toBe ('123');
    expect (Util.get_option ('bar')).toBe ('xyz');
  });

  it ('value is null string', function () {
    item.Comment = '';
    folderdata.Post = 'asdf=';

    expect (Util.get_option ('asdf')).toBe ('');
  });

  it ('name is hasKey', function () {
    item.Comment = 'hasKey=3.14';
    folderdata.Post = '=';

    expect (Util.get_option ('hasKey')).toBe ('3.14');
  });
});


describe ('Util.bind()', function () {
  it ('returns function', function () {
    function f () {
      return 'foo';
    }
    var b = Util.bind (f);

    expect (typeof b).toBe ('function');
    expect (b ()).toBe ('foo');
  });

  it ('binds object as "this"', function () {
    var obj = { a: 123 };
    function f () {
      return this.a;
    }
    var b = Util.bind (f, obj);

    expect (b ()).toBe (123);
  });

  it ('binds arguments', function () {
    function f (a) {
      return a;
    }
    var b = Util.bind (f, null, 'foo');

    expect (b ()).toBe ('foo');

    function f2 (a, b) {
      return a + '-' + b;
    }
    var b2 = Util.bind (f2, null, 'foo');

    expect (b2 ('bar')).toBe ('foo-bar');
  });

  it ('does not change called function to apply/call mode', function () {
    function f (a) { return a; }
    Util.bind (f, null) ('foo');

    expect (f ('genuine', [ 'apply mode' ])).toBe ('genuine');
  });
});


describe ('Util.isHttpsNoCookies()', function () {
  it ('returns true or false', function () {
    var a = Util.isHttpsNoCookies ();
    expect (a).toBe (a ? true : false);

    var b = Util.isHttpsNoCookies ();
    expect (b).toBe (a);
  });
});


// EOF
