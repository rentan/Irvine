//Dorothy2
//caption=DorothyEx
//version=0.16
//hint=
//match=
//author=wan
//path=common
//end

/*
Copyright (C) 2015,2016 wan <thewanwan111@gmail.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


(function(){
DorothyEx = {};
DorothyEx.queueFolder = '';
DorothyEx.isDorothy2A = false;
DorothyEx.isDorothy2set = false;
DorothyEx.isDorothy2ListMenu = false;
DorothyEx.isDOA = false;
DorothyEx.isRentan = typeof Dorothy.rVersion != 'undefined';
switch(WScript.ScriptName){
	case 'Dorothy2A.dms':
	case 'Dorothy2R_a.dms':
		DorothyEx.isDorothy2A = true;
		DorothyEx.queueFolder = /queue\s*=\s*(\/[^;]+)/g.test(folderdata.Post) ? RegExp.$1 : '';
		break;
	case 'Dorothy2R_listmenu.dms':
	case 'Dorothy2ListMenu.dms':
		DorothyEx.isDorothy2ListMenu = true;
		//next
	case 'Dorothy2set.dms':
	case 'Dorothy2R_set.dms':
		DorothyEx.isDorothy2set = true;
		DorothyEx.queueFolder = Irvine.Current.Path;
		break;
	case 'DOA.dms':
	case 'xor100813_2.dms':
	case 'Dorothy2R_doa_list.dms':
	case 'Dorothy2R_doa_tree.dms':
		DorothyEx.isDOA = true;
		DorothyEx.queueFolder = DOA.CurrentQueueFolder;
		break;
	default:
		alert('DorothyExエラー 不明な実行環境: ' + WScript.ScriptName);
		exit();
}
/*
if((typeof SettingForm != 'undefined' && typeof OnMainMenuClick == 'function') ||
	 (typeof OnListMenuClick == 'function' && (typeof Dorothy.url == 'string' || typeof _ == 'object') )){
	DorothyEx.isDorothy2set = true;
	DorothyEx.queueFolder = Irvine.Current.Path;
}else if(typeof frmDOA == 'object' && nameOf(frmDOA) == 'VCLForm' && typeof OnListMenuClick == 'function'){
	DorothyEx.isDOA = true;
	DorothyEx.queueFolder = DOA.CurrentQueueFolder;
}else if(typeof OnHttpRequest == 'function'){
	DorothyEx.isDorothy2A = true;
	DorothyEx.queueFolder = /queue\s*=\s*([^;]+)/g.test(folderdata.Post) ? RegExp.$1 : '';
}
*/

DorothyEx._getVersion = (function(){
	var cache = {};
	return function(path){
			if(cache.hasKey(path)) return cache[path];
			var sl = new Strings();
			cache[path] = '';
			try{
				sl.loadFromFile(path);
				if(/^version=([^\n]+)/m.test(sl.text)){
					cache[path] = RegExp.$1;
				}
			}catch(e){
				println(e);
			}
			return cache[path];
		};
})();
DorothyEx.getVersionDorothy2A = function(){
	return this.isRentan ? Dorothy.rVersion : this._getVersion((new irvinePath).scripts + 'Dorothy2A.dms');
};
DorothyEx.getVersionDorothy2set = function(){
	return this.isRentan ? Dorothy.rVersion : this._getVersion((new irvinePath).scripts + 'Dorothy2set.dms');
};
DorothyEx.getVersionDorothy2ListMenu = function(){
	return this.isRentan ? Dorothy.rVersion : this._getVersion((new irvinePath).scripts + 'Dorothy2ListMenu.dms');
};
DorothyEx.getVersionDOA = function(){
	return this.isRentan ? Dorothy.rVersion : this._getVersion((new irvinePath).scripts + 'DOA.dms');
};
//実行環境別にアイテムの保存場所を取得する 相対パスの場合は絶対パスになるまで上位キューフォルダから取得していく
DorothyEx.getSaveFolder = function(){
	if(this.isDOA){
		var item = typeof item != 'undefined' ? item : new IrvineItem();
	}else if(this.isDorothy2set){
		return Dorothy.userPath;
	}
	var ipath = item.folder;
	if(/^[a-z]:/i.test(ipath)){
		ipath += '\';//C: -> C:\  \が二重になっても問題ない
		return new Directory(ipath).path;
	}

	//絶対パスになるまで順に上位キューフォルダから保存パスを取得
	var path;
	if(this.isDOA){
		var folder = new ActiveXObject('Irvine.Folder');
		folder.path = DorothyEx.queueFolder;
		path = folder.Data['queue', 'folder'] + '\' + ipath;
		while(!/^[a-z]:/i.test(path) && folder.path != '/'){
			folder = folder.Parent;
			path = folder.Data['queue', 'folder'] + '\' + path;
		}
	}else{
		path = folderdata.Folder + '\' + ipath;
		var qPath = (new irvinePath).queue;
		var irvQPath = DorothyEx.queueFolder;
		var ini;
		while(!/^[a-z]:/i.test(path)){
			irvQPath = irvQPath.slice(0, irvQPath.lastIndexOf('/'));
			ini = new Ini(new Directory(qPath + irvQPath).path + 'queue.ini');
			path = ini.read('queue', 'folder', '') + '\' + path;
			if(!irvQPath) break;
		}
	}
	return new Directory(path).path;
};
//Dorothy.userPath Dorothy.userIniPathが使えないDOA用
DorothyEx.getUserPath = function(){
	return this.isDOA ? Dorothy.path + 'user\' + Dorothy.matchFile + '\' : Dorothy.userPath;
};
DorothyEx.getUserIniPath = function(){
	return this.isDOA ? this.getUserPath() + Dorothy.matchFile + '.ini' : Dorothy.userIniPath;
};
//DOA Dorothy2set でもfolderdataを使えるようにする
DorothyEx.setFolderData = function(){
	if(this.isDorothy2A) return;
	var strToDateTime = function(str){
		var d = new Date(),
			oneday = 86400000, //一日
			unixDateDelta = 25569, //UnixDateDelta[UNIX時間とTDateTimeとの差]
			offset = d.getTimezoneOffset() * 60 * 1000; //世界協定時刻(UTC)との差
		if(/^((\d{4})\/(\d+)\/(\d+))?\s*((\d+):(\d+):(\d+))?$/.test(str)){
			if(RegExp.$1){
				d.setYear(RegExp.$2);
				d.setMonth(RegExp.$3 - 1);
				d.setDate(RegExp.$4);
			}
			d.setHours(RegExp.$6);
			d.setMinutes(RegExp.$7);
			d.setSeconds(RegExp.$8);
			d.setMilliseconds(0);
			
			return (d.getTime() - offset + unixDateDelta * oneday) / oneday;
			//return (d.getTime() - offset) / oneday + UnixDateDelta;
		};
		return 0;
	};
	var folder = new ActiveXObject('Irvine.Folder');
	var nowTime = strToDateTime(new Date().toString());
	folder.path = this.isDOA ? DOA.CurrentQueueFolder : Irvine.Current.path;
	folderdata = new IrvineFolderData;
	//型変換はfolderdata側がやってくれる
	//folderdata.AbsolutePath        = folder.AbsolutePath;
	folderdata.Agent               = folder.Values['agent'];
	folderdata.AutoRemoveFolder    = folder.Values['autoremovefolder'];
	folderdata.AutoRename          = folder.Values['autorename'];
	folderdata.AutoRenameDate      = folder.Values['autorenamedate'];
	folderdata.AutoRenameHash      = folder.Values['autorenamehash'];
	folderdata.AutoRenameHashNum   = folder.Values['autorenamehashnum'];
	folderdata.AutoSort            = folder.Values['autosort'];
	folderdata.AutoStart           = folder.Values['autostart'];
	folderdata.BeginAutoStart      = folder.Values['beginautostart'];
	folderdata.BeginTime           = strToDateTime(folder.Values['begintime']);
	if(folderdata.BeginTime < nowTime) folderdata.BeginTime += 1;
	folderdata.BufferSize          = folder.Values['buffersize'];
	folderdata.CernType            = folder.Values['cerntype'];
	folderdata.ChangeImportFolder  = folder.Values['changeimportfolder'];
	folderdata.CharCode            = folder.Values['charcode'];
	folderdata.ClearTrash          = folder.Values['cleartrash'];
	folderdata.Cookie              = folder.Values['cookie'];
	folderdata.CookieStr           = folder.Values['cookiestr'];
	folderdata.CrcTryCount         = folder.Values['crctrycount'];
	folderdata.CreateDate          = strToDateTime(folder.Values['createdate']);
	folderdata.DateFolder          = folder.Values['datefolder'];
	folderdata.DownloadCount       = folder.Values['downloadcount'];
	folderdata.DupFile             = folder.Values['dupfile'];
	folderdata.DupFileConfirm      = folder.Values['dupfileconfirm'];
	folderdata.DupUrl              = folder.Values['dupurl'];
	folderdata.DupUrlConfirm       = folder.Values['dupurlconfirm'];
	folderdata.EndTime             = strToDateTime(folder.Values['endtime']);
	if(folderdata.EndTime < nowTime) folderdata.EndTime += 1;
	folderdata.Expanded            = folder.Values['expanded'];
	folderdata.Folder              = folder.Values['folder'];
	folderdata.FtpDirSearch        = folder.Values['ftpdirsearch'];
	folderdata.FtpProxy            = folder.Values['ftpproxy'];
	folderdata.FtpProxyPassword    = folder.Values['ftpproxypassword'];
	folderdata.FtpProxyUserId      = folder.Values['ftpproxyuserid'];
	folderdata.FtpSubDirSearch     = folder.Values['ftpsubdirsearch'];
	folderdata.FtpTimeout          = folder.Values['ftptimeout'];
	folderdata.GetDate             = folder.Values['getdate'];
	folderdata.HiddenAttr          = folder.Values['hiddenattr'];
	folderdata.History             = folder.Values['history'];
	folderdata.HttpMethod          = folder.Values['httpmethod'];
	folderdata.HttpProxy           = folder.Values['httpproxy'];
	folderdata.HttpProxyPassword   = folder.Values['httpproxypassword'];
	folderdata.HttpProxyUserId     = folder.Values['httpproxyuserid'];
	folderdata.HttpTimeout         = folder.Values['httptimeout'];
	folderdata.HttpVersion         = folder.Values['httpversion'];
	folderdata.Ignore3xx           = folder.Values['ignore3xx'];
	folderdata.Ignore404           = folder.Values['ignore404'];
	folderdata.Image               = folder.Values['image'];
	folderdata.InvalidSplitDownload= folder.Values['invalidsplitdownload'];
	folderdata.LessSize            = folder.Values['lesssize'];
	folderdata.LessSpeed           = folder.Values['lessspeed'];
	folderdata.LessSpeedRetry      = folder.Values['lessspeedretry'];
	folderdata.LimitSpeed          = folder.Values['limitspeed'];
	folderdata.ListViewStyle       = folder.Values['listviewstyle'];
	folderdata.MailAddress         = folder.Values['mailaddress'];
	folderdata.Mark                = folder.Values['mark'];
	folderdata.MaxItemCount        = folder.Values['maxitemcount'];
	folderdata.MaxSpeed            = folder.Values['maxspeed'];
	folderdata.MoreSize            = folder.Values['moresize'];
	folderdata.MoveTrash           = folder.Values['movetrash'];
	folderdata.Nlst                = folder.Values['nlst'];
	folderdata.NoCache             = folder.Values['nocache'];
	folderdata.Pasv                = folder.Values['pasv'];
	//folderdata.Path                = folder.Path;
	folderdata.Post                = folder.Values['post'];
	folderdata.Postpone            = folder.Values['postpone'];
	folderdata.Priority            = folder.Values['priority'];
	folderdata.ProxyErrorCount     = folder.Values['proxyerrorcount'];
	folderdata.ProxyErrorTo        = folder.Values['proxyerrorto'];
	folderdata.RandomAgent         = folder.Values['randomagent'];
	folderdata.RandomFtpProxy      = folder.Values['randomftpproxy'];
	folderdata.RandomHttpProxy     = folder.Values['randomhttpproxy'];
	folderdata.Referer             = folder.Values['referer'];
	folderdata.RefererStr          = folder.Values['refererstr'];
	folderdata.RemoveCrcError      = folder.Values['removecrcerror'];
	folderdata.RemoveQuery         = folder.Values['removequery'];
	folderdata.RemoveTrashItem     = folder.Values['removetrashitem'];
	folderdata.ResumeOverwrite     = folder.Values['resumeoverwrite'];
	folderdata.RollBackBytes       = folder.Values['rollbackbytes'];
	folderdata.SelectIndex         = folder.Values['selectindex'];
	folderdata.SortItem            = folder.Values['sortitem'];
	folderdata.SplitCount          = folder.Values['splitcount'];
	folderdata.StorageTrashCount   = folder.Values['storagetrashcount'];
	folderdata.TryConnect          = folder.Values['tryconnect'];
	folderdata.TryConnectCount     = folder.Values['tryconenctcount'];//iniの方は元から綴りが間違っている
	folderdata.TryConnectWait      = folder.Values['tryconnectwait'];
	folderdata.TryResume           = folder.Values['tryresume'];
	folderdata.UrlEncode           = folder.Values['urlencode'];
	folderdata.UrlFolder           = folder.Values['urlfolder'];
	folderdata.UrlUtf8             = folder.Values['urlutf8'];
	folderdata.UseBeginTime        = folder.Values['usebegintime'];
	folderdata.UseCrc              = folder.Values['usecrc'];
	folderdata.UseEndTime          = folder.Values['useendtime'];
	folderdata.UseFtpProxy         = folder.Values['useftpproxy'];
	folderdata.UseHttpProxy        = folder.Values['usehttpproxy'];
	folderdata.UseHttpProxyForFtp  = folder.Values['usehttpproxyforftp'];
	folderdata.UseHttpProxyForHttps= folder.Values['usehttpproxyforhttps'];
	folderdata.UseLessSize         = folder.Values['uselesssize'];
	folderdata.UseMoreSize         = folder.Values['usemoresize'];
	folderdata.UseRecycle          = folder.Values['userecycle'];
	folderdata.UseResume           = folder.Values['useresume'];
	folderdata.UseRollBack         = folder.Values['userollback'];
	folderdata.ViewIndex           = folder.Values['viewindex'];
};

DorothyEx.setDOA = function(itemData){
	if(!this.isDOA){
		println('.setDOA()は DOA でしか使用できません');
		exit();
	}else if(typeof itemData != 'object' || nameOf(itemData) != 'IrvineItem'){
		alert('未知のエラー。itemDataが正しく指定されていません');
		exit();
	}
	Dorothy.userPath = this.getUserPath();
	Dorothy.userIniPath = this.getUserIniPath();
	item = itemData;//Global.item とはしない様にする事

	headers = {
		"Referer": "",
		"User-Agent": Irvine.FolderData('http' ,'agent'),
		"Cookie": "",
		"Host": new URL(item.url).host
	};

	if(nameOf(urlinfo) != 'IrvineUrlInfo'){
		var u = new IrvineUrlInfo;
		for(var i in urlinfo) u[i] = urlinfo[i];
		urlinfo = u;
	}
};

//環境別の差異がなるべく少なくなる様に再定義する
DorothyEx.define = function(){
	if(this.isRentan){
		Global.common_reload = function(){
			for (var i = 0; i < arguments.length; i++) {
				common_xload (arguments [i]);
			}
		};
	}else{
		file_load = function (path) {
			var r,
				path2 = /^[a-z]:\\/i.test(path) ? path : Dorothy.path + path,
				file = new File(path2),
				mutex = new Mutex ('file_load');
			
			mutex.lock();
			try{
				file.open('r');
				r = file.read();
			}catch(e){
				println('error>' + e + ' ' + path + ' の読み込みに失敗しました。');
				if(!file.exists()) println('error>' + path2 + ' が存在しません。');
				exit();
			}finally{
				file.close();
				mutex.unlock();
			}
			return r;
		};
	}
	if(this.isDorothy2A){
		if(this.isRentan){
			Global.reset = function(){
				for(var i = 0 ; i < arguments.length ; i++){
					println(arguments[i]);
				}
				var url = new URL(Dorothy.oldUrl);
				urlinfo.url = url.url;
				headers.host = url.host;
			};
			
		}
		dorothy2_path                = Dorothy.path;
		dorothy2_temp                = dorothy2_path + 'temp\';
		dorothy2_document            = dorothy2_path + 'document\';
		dorothy2_common              = dorothy2_path + 'common\';
		dorothy2_program             = dorothy2_path + 'program\';
		dorothy2_setting             = dorothy2_path + 'setting\';
		dorothy2_system              = dorothy2_path + 'system\';
		dorothy2_project             = dorothy2_path + 'project\';
		dorothy2_projectdata         = dorothy2_path + 'projectdata\';
		dorothy2_bin                 = dorothy2_path + 'bin\';
		dorothy2_user                = dorothy2_path + 'user\';
		dorothy2_system_menu         = dorothy2_system + 'menu\';
		dorothy2_system_menu_new     = dorothy2_system_menu + 'new\';
		dorothy2_system_menu_setting = dorothy2_system_menu + 'setting\';
		dorothy2_system_menu_edit    = dorothy2_system_menu + 'edit\';
		dorothy2_system_menu_project = dorothy2_system_menu + 'project\';
		dorothy2_system_menu_tool    = dorothy2_system_menu + 'tool\';
		dorothy2_system_menu_set     = dorothy2_system_menu + 'set\';
		dorothy2_system_menu_package = dorothy2_system_menu + 'package\';
		dorothy2_system_menu_help    = dorothy2_system_menu + 'help\';
		dorothy2_system_ini          = dorothy2_system + 'ini\';
		irvine_script_path           = (new irvinePath).scripts;
		Dorothy.url = Dorothy.oldUrl;
	}else if(this.isDOA){
		if(this.isRentan){
			irvine_script_path = (new irvinePath).scripts;
		}else{
			Dorothy.programDir = dorothy2_program;
			Dorothy.version = this.getVersionDorothy2A();
			Dorothy.temp = dorothy2_temp;
		}
		var item = new IrvineItem();
		item.url = urlinfo.url;
		this.setDOA(new IrvineItem);
	}else if(this.isDorothy2set){
		if(!this.isRentan){
			Global.print_debug = function(str){
				if(debug) println(str);
			};
		}
		if(!this.isDorothy2ListMenu){
			//無理矢理 選択アイテム取得
			item = new IrvineItem;
			var count = Irvine.ItemCount;
			for(var i = 0; i < count; i++){
				if(Irvine.GetItemSelected(i)){
					item.data = Irvine.GetItemData(i);
					if(item.url.indexOf('ttp://') == 0){
						item.url = 'h' + item.url;
					}
					break;
				}
			}
			Dorothy.url = item.url;
		}else{
			if(this.isRentan){
				irvine_script_path = (new irvinePath).scripts;
				Dorothy.url = item.url;
			}
		}
		urlinfo = new IrvineUrlInfo;
		urlinfo.url = item.url;
		headers = {
			"Referer": "",
			"User-Agent": Irvine.FolderData('http' ,'agent'),
			"Cookie": "",
			"Host": new URL(item.url).host
		};
	}
	this.setFolderData();
};

DorothyEx.doaSetitem = function(){
	if(!this.isDOA){
		println('.doaSetItem()は DOA でしか使用できません');
		return false;
	}else if(typeof DOA_IT != 'number' || typeof item != 'object' || nameOf(item) != 'IrvineItem'){
		println('未知のエラー。DOA_ITまたはitemが正しく定義されていません');
		return false;
	}

	DOA.status = DOA_IT;
	if(DOA.name) item.filename = DOA.name;
	if(DOA.comment) item.comment += DOA.comment;
	if(!item.url) item.url = urlinfo.url;

	var size = DOA.size.replace(/[,\s]+/g, '');
	if(/^([\d\.]+)([KMG])?(B|Byte)?$/i.test(size)){
		switch(RegExp.$2.toUpperCase()){
			case '':
				item.filesize = RegExp.$1 * 1;
				break;
			case 'K':
				item.filesize = RegExp.$1 * 1024;
				break;
			case 'M':
				item.filesize = RegExp.$1 * 1048576;
				break;
			case 'G':
				item.filesize = RegExp.$1 * 1073741824;
				break;
		}
	}
	return true;
};

//------------------------------------------------------------------------------

DorothyEx.define();
})();