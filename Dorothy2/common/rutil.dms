//Dorothy2
//caption=Util.*
//version=20160118.0
//hint=utility
//match=
//author=rentan
//path=common
//end

/*
Copyright (C) 2012-2016 rentan at rentan.org

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

(function () {


// コンテナ
Util = { };


// 現在のアイテムをダウンロード後に削除させる
Util.remove_this = function () {

  // Dorothy2B.dms に削除してもらう
  urlinfo.url = 'http://www.google.com/favicon.ico';
  Dorothy.fileName = 'remove';

  headers.Referer = '';
  headers.Cookie = '';
  headers.Host = (new URL (urlinfo.url)).host;
};


// .ini ファイルを読み込む
Util.ini_load = function (def_dat, ini_file) {
  var r = { };

  // 標準値をコピー
  if (typeof def_dat == 'object') {
    for (var sec_name in def_dat) {
      r [sec_name] = { };
      var sec = def_dat [sec_name];
      for (var key_name in sec) {
        r [sec_name] [key_name] = sec [key_name];
      }
    }
  }

  var ini = new Ini (ini_file || Dorothy.userIniPath);

  // 全セクション名を読み込む
  var secs = ini.readSections ();
  for (var i in secs) {
    var sec_name = secs [i];
    if (typeof (r [sec_name]) != 'object') {
      // セクションのオブジェクトがなければ新しく作る
      r [sec_name] = { };
    }

    // このセクションの全キー名を読み込む
    var keys = ini.readSection (sec_name);
    for (j in keys) {
      // キーの値を読み込む
      var key_name = keys [j];
      var value = ini.read (sec_name, key_name, '');

      if (r [sec_name].hasKey (key_name)) {
        // 標準値が boolean や number ならその型に変換する
        var type = typeof (r [sec_name] [key_name]);
        if (type == 'boolean') {
          value = (value.trim ().toLowerCase () == 'true');
        }
        else if (type == 'number') {
          value = parseInt (value.trim ());
          value = isNaN (value) ? 0 : value;
        }
      }
      r [sec_name] [key_name] = value;

      // print_debug ('Util.ini_load: [' + sec_name + ']' + key_name + '=' + value);
    }
  }

  return r;
};


// .ini ファイルを書き出す
Util.ini_save = function (dat, ini_file) {
  if (typeof dat != 'object') {
    return;
  }

  var ini = new Ini (ini_file || Dorothy.userIniPath);

  // 全セクションを書き出す
  for (var sec_name in dat) {
    var keys = dat [sec_name];
    for (var key_name in keys) {
      var value = keys [key_name].toString ();
      ini.write (sec_name, key_name, value);
    }
  }

  ini.update ();
};


// .ini ファイルをテキストエディタで開く
//  .ini がない場合は .default.ini からコピーしてから開く
Util.ini_copy_edit = function () {
  var ini_path = Dorothy.userIniPath;


  // デフォルト設定をコピーする
  function copy_default_ini (ini_path) {
    var def_path = ini_path.replace (/\.ini$/, '.default.ini');
    var def = new File (def_path);

    if (!def.exists ()) {
      alert ("デフォルト設定ファイルが見つかりません。\n\n" + def_path);
      return false;
    }

    if (new File (ini_path).exists ()) {
      alert ("設定ファイルが既に存在します。\n\n" + ini_path);
      return false;
    }

    def.copyTo (ini_path);
    alert ("設定ファイルを作成しました。\n\n" + ini_path);
    return true;
  }


  // .ini ファイルが存在しなければデフォルト設定をコピーする
  if (!(new File (ini_path)).exists ()) {
    if (!copy_default_ini (ini_path)) {
      return;
    }
  }

  // .ini ファイルをテキストエディタで開く
  Dorothy.edit (ini_path);
};


// オプションを取得する
Util._options = null;
Util.get_option = function (key) {
  var o = Util._options;

  // 初回ならオプションを読み込む
  if (!o) {
    o = Util._options = [ ];

    function load (s) {
      s = s.split (/;/);
      for (var i = 0; i < s.length; ++i) {
        if (/^([^=]+)\s*=\s*(.*)$/.test (s [i])) {
          o.push ({ k: RegExp.$1, v: RegExp.$2 });
        }
      }
    }

    load (folderdata.Post);
    load (item.Comment);
  }

  for (var i = o.length; --i >= 0;) {
    if (o [i].k == key) {
      return o [i].v;
    }
  }

  return null;
};


// エラー終了
Util.fatal = function (s) {
  println (s.replace (/\n(\n)+/g, "\n"));
  alert (s);
  exit ();
};


// INTERNET_FLAG_NO_COOKIES パッチの有無を返す
Util.isHttpsNoCookies = function () {
  var b = (function () {
    var f = new File (WScript.FullName);

    if (IrvineInfo.version != '1.3.1' || f.length != 3030528) {
      return false;
    }

    try {
      f.open ('rd');
      f.seek (0xb03bd);
      return (f.read (1).charCodeAt (0) & 8) == 8;
    }
    catch (e) {
      return false;
    }
    finally {
      f.close ();
    }
  }) ();

  Util.isHttpsNoCookies = (function (b) { return function () { return b; }; }) (b);

  return b;
};


// rutil.dms のバージョンチェック
Util.min_version = function (reqVer) {
  var fileVer = parseFloat (Dorothy.common ['rutil'].version);

  if (isNaN (fileVer) || fileVer < reqVer) {
    Util.fatal ("common\\rutil.dms のバージョンが古すぎます。\n最新版を使用して下さい。");
  }
};


// 関数の this と引数を束縛する
Util.bind = function (f, self) {
  var applier = (function (f) { return f; }) (f).apply;

  return (function (applier, self, args) {
    return function () {
      return applier (self, args.concat (arguments));
    };
  }) (applier, self, arguments.slice (2));
};


// common_xload() にバージョンチェックを組み込む
common_xload = (function (common_xload) {
  var versions = {
    'domparser\core': 20140816.0,
    'domparser\json': 20140928.0,
    'domparser\pseudo_xml': 20150821.0,
    'domparser\xml': 20140816.0,

    'esx\array': 20151206.0,
    'esx\date': 20141005.0,
    'esx\json': 20151125.0,

    'getter\chklistbox': 20150721.0,
    'getter\getterasync': 20151204.0,
    'getter\redir': 20160111.0,

    actibook: 20140331.0,
    additem: 20150103.0,
    browsercookie: 20150523.0,
    dmon: 20151127.0,
    exec: 20140331.0,
    getter: 20151113.0,
    htmlform: 20150119.0,
    http: 20150425.0,
    jinput: 20140908.0,
    namebuilder: 20150531.0,
    rutil_dorothy2r: 20141018.0,
    sleeptimer: 20151204.0,
    threadstorage: 20140913.0,
    utf8: 20140811.0,
    utf8_charref: 20140811.0,
    yasmine: 20151127.0
  };

  return function (name) {
    common_xload (name);

    if (versions.hasKey (name)) {
      var fileVer = parseFloat (Dorothy.common [name].version);

      if (isNaN (fileVer) || fileVer < versions [name]) {
        Util.fatal ("common\\" + name + ".dms のバージョンが古すぎます。\n最新版を使用して下さい。");
      }
    }
  };
}) (common_xload);


//----------------------- 実行環境が正しいか検証する -----------------------


if (Dorothy.hasKey ('rVersion')) {
  if (Dorothy.rVersion < 20160118) {
    Util.fatal ("Dorothy2R のバージョンが古すぎます。\n最新版を使用して下さい。");
  }
}
else {
  common_load ('rutil_dorothy2r');
}


// フォルダ設定
(function () {
  if (typeof folderdata != 'object') {
    return;
  }

  // フォルダ設定 → HTTP(1) → HTTP メソッド
  if (folderdata.HttpMethod) {
    Util.fatal (urlinfo.url + "\n\n" +
      "HTTP メソッドが GET 以外のフォルダでは実行できません。\n" +
      "GET に設定したフォルダで実行して下さい。");
  }

  // フォルダ設定 → HTTP(2) → User-Agent
  if (/^Mozilla\/[0-4]\.\d*|MSIE\s+[0-8]\.\d*|Irvine/.test (folderdata.Agent)) {
    Util.fatal (urlinfo.url + "\n\n" +
      "User-Agent に " + RegExp.$0 + " が含まれています。\n" +
      "適切な User-Agent に変更して下さい。");
  }
}) ();


}) ()


// EOF
