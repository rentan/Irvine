//Dorothy2
//caption=Twitter_r
//version=20160317.0
//hint=
//match=^https://twitter\.com/[^/]+/(status(es)?/\d|media$)
//author=rentan
//path=program
//priority=500
//end

/*
Copyright (C) 2012-2016 rentan at rentan.org

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

function (scriptMode) {

  common_load ('rutil', 'additem', 'browsercookie', 'namebuilder');
  Util.min_version (20160314.0);

  var defaultIni = {
    AddItem: AddItem.prototype.iniTemplate,
    Cookie: BrowserCookie.prototype.iniTemplate,
    General: {
      Zen2Han: false,
      PageOrigin: 0,
      SaveHtml: false
    },
    Filename: {
      Photo: 'twitter_%ID%',
      Photo2: 'twitter_%ID%_%P%',
      Video: 'twitter_%ID%',
      Video2: 'twitter_%ID%_%P%',
      Html: 'twitter_%ID%'
    }
  };

  if (Dorothy.userName == 'rentan') {
    defaultIni.Cookie.Browser = 'Firefox';
  }


//-------------------------------- Twitter ---------------------------------


common_load ('getter', 'http', 'utf8');


// コンストラクタ
Getter (function Twitter (opt) {
  this._cookie = this._getArg (opt, 'Cookie', null);
});


// /i/videos/\d+\?embed_source=facebook 内の動画を抽出する
Twitter.prototype._analyzeVideos = function (url) {
  var http = this.http;

  if (!http.get (url)) {
    return this._httpError ();
  }

  if (!/<div\s+id="playerContainer"[^>]*data-config="([^"]*)"/.test (http.data)) {
    return this._unknown ('<div id="playerContainer"> が見つかりません。');
  }
  var conf = RegExp.$1;

  if (!/&quot;video_url&quot;:&quot;(https?:.*?)&quot;/.test (http.data)) {
    return this._unknown ('video_url が見つかりません。');
  }
  var video_url = RegExp.$1.replace (/\\/g, '');

  this.type = 'Video';
  return this._add ({ Url: video_url });
};


// ツイート内の画像URLを抽出する
Twitter.prototype._analyzeTweetImage = function () {
  function addImage (url) {
    this._add ({ Url: url.replace (/(:[a-z]*)?$/, ':orig') });
  }

  var http = this.http;
  var html = http.data;


  var head = html.slice (0, html.indexOf ('</head'));

  var ogimages = [ ];
  function add (s, p1) {
    ogimages.push (p1);
  }

  var meta = /<meta\s+property="og:image"\s+content="(https:\/\/pbs\.twimg\.com\/media\/[^"]+)"/g;
  head.replace (meta, add);

  var len = ogimages.length;
  if (len) {
    for (var i = 0; i < len; ++i) {
      addImage (ogimages [i]);
    }

    this.type = (len >= 2) ? 'Photo2' : 'Photo';
    return this._ok ();
  }


  if (!/<div class="[^"]*permalink-tweet-container[^"]*"[^>]*>/.test (html)) {
    return this._ng ('<div class="permalink-tweet-container"> が見つかりません。');
  }
  html = RegExp.rightContext;

  if (!/<div class="[^"]*js-machine-translated-tweet-container/.test (html)) {
    return this._ng ('<div class="js-machine-translated-tweet-container"> が見つかりません。');
  }
  html = RegExp.leftContext;

  // RegExp.test 高速化
  function testRegExp (re, text) {
    var head = re.toString ().replace (/^\/([^.?*\\[(^$]+).*$/, '$1');

    if (head) {
      var pos = text.indexOf (head);
      if (pos === -1) {
        return false;
      }
      text = text.slice (pos);
    }

    return re.test (text);
  }

  // 動画
  if (testRegExp (/<meta\s+property="og:video:secure_url"\s+content="(https:\/\/twitter\.com\/i\/videos\/[^"]+)"/, http.data)) {
    return this._analyzeVideos (RegExp.$1);
  }

  http.capture ();
  return this._ng ('画像URLが見つかりません。');
};


// ツイートの情報を取得する
Twitter.prototype._analyzeTweet = function () {
  var http = this.http;

  var path = (new URL (http.baseUrl)).path.slice (1);
  if (!/^([^\/]+)\/status(es)?\/(\d+)/.test (path)) {
    // エラー終了させるため mis ではなく unknown
    return this._unknown ('未対応のURLです。');
  }
  this.twitter_id = RegExp.$1;  // ユーザー名
  this.id = RegExp.$3;  // ツイートのパーマリンクID

  if (!/<div\s+[^>]*class="permalink-inner\s+permalink-tweet-container[^>]*>(.*?)<div\s+[^>]*class="permalink-footer/.test (http.data)) {
    return this._unknown ('<div class="permalink-inner permalink-tweet-container"> が見つかりません。');
  }
  var html = RegExp.$1;

  if (!/<strong\s+class="fullname[^>]*>\s*([^<]+)\s*</.test (html)) {
    return this._unknown ('<strong class="fullname ..."> が見つかりません。');
  }
  this.user_name = (new Utf8 (RegExp.$1)).decodeCharRef ();

  var t = null;
  if (/<p\s+class="[^"]*js-tweet-text\s+tweet-text[^>]*>(.*?)<\/p>/.test (html)) {
    t = RegExp.$1;
  }
  else if (/<div\s+class="[^"]*tweet-text\s+js-tweet-text[^>]*>(.*?)<\/div>/.test (html)) {
    t = RegExp.$1;
  }
  else {
    return this._unknown ('ツイート本文が見つかりません。');
  }

  // ツイート本文の末尾が pic.twitter.com/*** なら切り離す
  this.pic_id = '';  // *** 部分のみ
  var picRe = /^(.*?)\s*<a\s[^>]*class="[^"]*twitter-timeline-link[^"]*"[^>]*>pic\.twitter\.com\/([^<]+)<\/a>\s*$/;
  if (picRe.test (t)) {
    t = RegExp.$1;
    this.pic_id = RegExp.$2;
  }

  this.title = (new Utf8 (t)).removeTags ().decodeCharRef ().toUTF8 ();

  // 画像(または動画)のURLを抽出する
  return this._analyzeTweetImage ();
};


// ブラウザからCookieを読み込む
Twitter.prototype._importCookie = function (http, url) {
  var bcookie = new BrowserCookie (this._cookie);

  var host = '.' + (new URL (url)).hostname;
  var o = { https: true, host: host, name: 'auth_token' };

  var cookie = bcookie.import (o);
  print_debug ('Cookie: ' + cookie);

  if (!cookie) {
    return this._ng ('Cookieが読み込めませんでした。');
  }

  http.setRequestHeader ('Cookie', cookie);
  return this._ok ();
};


// 単一のツイートに含まれる画像を抽出する
Twitter.prototype._getTweetImage = function (url) {
  var http = this.http = new Http ();
  var cookieImported = false;

  for (;;) {
    if (http.get (url)) {
      // ツイートのHTMLが取得できた成功
      break;
    }
    var loc = (http.code == 302) ? http.location : '';

    // 自分がリツイートした他人の画像ツイート
    if (/^https:\/\/twitter\.com\/[^\/]+\/status\/\d+$/.test (loc)) {
      url = loc;
      continue;
    }

    if (/\?protected_redirect=true(&|$)/.test (loc)) {
      if (cookieImported) {
        return this._ng ('非公開設定アカウント: 未フォローです。');
      }
      if (!Util.isHttpsNoCookies ()) {
        return this._ng ('非公開設定アカウント: IEでログインしていないか、未フォローです。');
      }

      // Cookieを読み込んでもう一度だけ試す
      if (!this._importCookie (http, url)) {
        return false;
      }
      cookieImported = true;
      continue;
    }

    // それ以外なら失敗
    return this._httpError ();
  }

  this._html = http.data;

  // 取得したHTMLを解析する
  return this._analyzeTweet ();
};


// media/grid の JSON を解析してリストに追加
//  最後の id を返す
Twitter.prototype._analyzeMediaGridJson = function (http, base) {
  var urls = [ ];
  var lastId = null;

  function add (s, path, id) {
    lastId = id;
    urls.push (path);
    return '';
  }
  http.data.replace (/data-permalink-path=\\"\\\/([^"]+\\\/(\d+))\\"/g, add);

  var len = urls.length;
  for (var i = 0; i < len; ++i) {
    this._add ({ Url: base + urls [i].replace (/\\/g, '') });
  }

  return lastId;
};


// 画像一覧に含まれる画像を抽出する
Twitter.prototype._getMediaImage = function (url) {
  if (!/^(https?:\/\/[^\/]*\/)([^\/]+)\//.test (url)) {
    return this._ng ('内部エラー');
  }
  var head = RegExp.$1;
  var twitterId = RegExp.$2;

  var http = this.http = new Http ();
  http.setRequestHeader ('Referer', head + twitterId + '/media');

  var base = head;
  var json = head + 'i/profiles/show/' + twitterId + '/media_timeline?include_available_features=1&include_entities=1';

  var lastId = '', prevId = '';
  var maxId = '';

  var cookieImported = false;

  for (;;) {
    if (!http.getXhr (json + maxId)) {
      if (http.code != 404 || cookieImported || !Util.isHttpsNoCookies ()) {
        return this._httpError ();
      }

      if (!this._importCookie (http, json)) {
        return false;
      }
      cookieImported = true;
      continue;
    }
    if (this.debug) {
      http.capture ('media_timeline_json' + maxId.replace (/&max_position=/, '_') + '.txt');
    }

    prevId = lastId;
    lastId = this._analyzeMediaGridJson (http, base);

    if (!lastId) {
      if (/"max_id"\s*:\s*"-1"/.test (http.data)) {
        // {"max_id":"-1","has_more_items":true,"items_html":""}
        // が返ってくることがある(ブラウザで閲覧するとスピナーが回り続ける)
        this._p ('"max_id":"-1" が検出されました。古いツイートが取得できません。');
        break;
      }

      return this._unknown ('data-permalink-path が見つかりません。');
    }
    if (prevId === lastId) {
      return this._unknown ('同じツイートが読み込まれました。');
    }

    // 2回目以降は URL に ?max_id=〜 をつける
    maxId = '&max_position=' + lastId;

    if (!/"has_more_items"\s*:\s*(true|false)/.test (http.data)) {
      return this._unknown ('has_more_items が見つかりません。');
    }
    if (RegExp.$1 == 'false') {
      break;
    }
  }

  if (this.items.length == 0) {
    return this._unknown ('ダウンロード対象が見つかりませんでした。');
  }

  this.type = null;
  return this._ok ();
};


// User-Agentの検査
Twitter.prototype._isValidUserAgent = function () {
  if (/MSIE\s+9\.\d*/.test (folderdata.Agent)) {
    var s = "User-Agentに " + RegExp.$0 + " が含まれています。適切なUser-Agentに変更して下さい。";
    return this._ng (s);
  }

  return true;
};


// public: ファイル URL を取得する
Twitter.prototype.get = function (url) {
  this.items = [ ];
  this.type = null;
  this._html = null;

  this.twitter_id = null;
  this.user_name = null;
  this.id = null;
  this.pic_id = null;

  if (!this._isValidUserAgent ()) {
    return false;
  }

  var u = new URL (url);
  var path = u.path.slice (1);

  if (/^([^\/]+\/status(es)?\/\d+)([\/?#]|$)/.test (path)) {
    return this._getTweetImage (u.expand ('/' + RegExp.$1));
  }
  if (/^([^\/]+)\/media$/.test (path)) {
    return this._getMediaImage (url);
  }

  return this._mis ();
};


// NameBuilder インスタンスに変数値を書き込む
Twitter.prototype._setNameBuilderVar = function (nb) {
  nb.twitter_id = this.twitter_id;
  nb.user_name = this.user_name;
  nb.id = this.id;
  nb.pic_id = this.pic_id;
  nb.title = new Utf8 (this.title);
};


// public: ファイル名を生成する
//   NameBuilder/Format 必須
Twitter.prototype.buildFilename = function (args) {
  var nb = args.NameBuilder;
  var fmt = args.Format;

  this._setNameBuilderVar (nb);

  var items = this.items;
  var len = nb.pages = items.length;

  for (var i = 0; i < len; ++i) {
    nb.p = i;
    var itemData = items [i];
    var urlWithoutSize = itemData.Url.replace (/:[a-z]*$/, '');

    nb.f = urlWithoutSize.replace (/^.*\/|\.[^.\/]*$/g, '');

    var fnData = nb.buildFilename (fmt, urlWithoutSize);

    for (var key in fnData) {
      itemData [key] = fnData [key];
    }
  }

  return this._ok ();
};


// public: HTML をファイルに保存する
Twitter.prototype.saveHtml = function (args) {
  if (this._html == null) {
    return;
  }

  var nb = args.NameBuilder;
  this._setNameBuilderVar (nb);

  var f = nb.buildFilename (args.Format, '.html');
  var result = this.http.saveFile ({ filename: f, data: this._html });

  if (result.error) {
    this._p (result.error);
  }
};


//------------------------------- メイン処理 -------------------------------


  if (scriptMode === 'DEFINE_ONLY') {
    return;
  }

  var ini = Util.ini_load (defaultIni);

  var nb = new NameBuilder ({
    zen2han: ini.General.Zen2Han,
    definePPZ: ini.General.PageOrigin
  });

  var getter = new Twitter ({ Cookie: ini.Cookie });

  if (getter.get (urlinfo.url)) {
    var type = getter.type;
    if (type) {
      getter.buildFilename ({
        NameBuilder: nb,
        Format: ini.Filename [type]
      });
    }

    getter.download ({
      AddItem: new AddItem (ini.AddItem)
    });
  }

  if (ini.General.SaveHtml) {
    getter.saveHtml ({ NameBuilder: nb, Format: ini.Filename.Html });
  }

  getter.end ();
}


// EOF
