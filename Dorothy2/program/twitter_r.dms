//Dorothy2
//caption=Twitter_r
//version=20150130.0
//hint=
//match=^https://twitter\.com/[^/]+/(status(es)?/\d|media$)
//author=rentan
//path=program
//priority=500
//end

/*
Copyright (C) 2012,2013,2014,2015 rentan at rentan.org

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

function (scriptMode) {

  common_load ('rutil', 'additem', 'namebuilder');
  Util.min_version (20141215.0);

  var defaultIni = {
    AddItem: AddItem.prototype.iniTemplate,
    General: {
      Zen2Han: false,
      PageOrigin: 0
    },
    Filename: {
      Photo: 'twitter_%ID%',
      Photo2: 'twitter_%ID%_%P%',
      Video: 'twitter_%ID%',
      Video2: 'twitter_%ID%_%P%'
    }
  };


//-------------------------------- Twitter ---------------------------------


common_load ('getter', 'http', 'utf8');


// コンストラクタ
Getter (function Twitter () {
});


// /i/cards/tfw/v1/\d+?native=true&cardname=__entity_video 内の動画を抽出する
Twitter.prototype._analyzeVideoCards = function (cardsUrl) {
  if (!http.get (cardsUrl)) {
    return this._httpError ();
  }

  if (!/<div\s+id="ExternalIframeContainer"([^>]*)>/.test (http.data)) {
    return this._unknown ('<div id="ExternalIframeContainer"> が見つかりません。');
  }
  var eic = RegExp.$1;

  if (!/&quot;playlist&quot;:\[([^\]]+)\]/.test (eic)) {
    return this._unknown ('playlist が見つかりません。');
  }
  var pl = RegExp.$1;

  var sources = [ ];
  pl.replace (/&quot;source&quot;:&quot;(.*?)&quot;/g, function (s, p1) {
    sources.push (p1);
  });

  if (sources.length === 0) {
    return this._unknown ('動画URLが見つかりません。');
  }

  for (var i = 0; i < sources.length; ++i) {
    this._add ({ Url: sources [i].replace (/\\/g, '') });
  }

  this.type = (this.items.length > 1) ? 'Video2' : 'Video';

  return this._ok ();
};


// ツイート内の画像URLを抽出する
Twitter.prototype._analyzeTweetImage = function () {
  var http = this.http;

  // RegExp.test 高速化
  function testRegExp (re, text) {
    var head = re.toString ().replace (/^\/([^.?*\\[(^$]+).*$/, '$1');

    if (head) {
      var pos = text.indexOf (head);
      if (pos === -1) {
        return false;
      }
      text = text.slice (pos);
    }

    return re.test (text);
  }

  function addImage (url) {
    this._add ({ Url: url.replace (/(:[a-z]*)?$/, ':orig') });
  }

  // 画像表示ページ
  if (testRegExp (/<img class="large\s+media-slideshow-image"\s[^>]*src="([^"]+)"/, http.data)) {
    addImage (RegExp.$1);
    this.type = 'Photo';
  }

  // 単一画像
  else if (testRegExp (/<a class="media[^"]*"[^>]*\sdata-resolved-url-large="([^"]+)"/, http.data)) {
    addImage (RegExp.$1);
    this.type = 'Photo';
  }

  // 複数画像
  else if (testRegExp (/<div class="multi-photos[^>]*>(.*?)(<\/div>\s*){3}/, http.data)) {
    var html = RegExp.$1;

    var urls = [ ];
    var re = /<div\s+class="multi-photo[^>]*data-resolved-url-large="([^"]+)"/g;
    function add (s, p1) {
      urls.push (p1);
      return '';
    }
    html.replace (re, add);

    for (var i = 0; i < urls.length; ++i) {
      addImage (urls [i]);
    }
    this.type = 'Photo2';
  }

  // 動画
  else if (testRegExp (/<source video-src="(https:\/\/pbs\.twimg\.com\/tweet_video\/[^"]+)"/, http.data)) {
    this._add ({ Url: RegExp.$1 });
    this.type = 'Video';
  }

  // アプリで撮影した動画
  else if (testRegExp (/<div class="js-macaw-cards-iframe-container"[^>]*data-src="(\/i\/cards\/tfw\/v1\/[^"]*cardname=__entity_video)"/, http.data)) {
    var cardsUrl = RegExp.$1.replace (/&amp;/g, '&');
    if (!this._analyzeVideoCards (cardsUrl)) {
      return false;
    }
  }

  if (this.items.length == 0) {
    http.capture ();
    return this._ng ('画像URLが見つかりません。');
  }

  return this._ok ();
};


// ツイートの情報を取得する
Twitter.prototype._analyzeTweet = function () {
  var http = this.http;

  var path = (new URL (http.baseUrl)).path.slice (1);
  if (!/^([^\/]+)\/status(es)?\/(\d+)/.test (path)) {
    // エラー終了させるため mis ではなく unknown
    return this._unknown ('未対応のURLです。');
  }
  this.twitter_id = RegExp.$1;  // ユーザー名
  this.id = RegExp.$3;  // ツイートのパーマリンクID

  if (!/<div\s+[^>]*class="permalink-inner\s+permalink-tweet-container[^>]*>(.*?)<div\s+[^>]*class="permalink-footer/.test (http.data)) {
    return this._unknown ('<div class="permalink-inner permalink-tweet-container"> が見つかりません。');
  }
  var html = RegExp.$1;

  if (!/<strong\s+class="fullname[^>]*>\s*([^<]+)\s*</.test (html)) {
    return this._unknown ('<strong class="fullname ..."> が見つかりません。');
  }
  this.user_name = (new Utf8 (RegExp.$1)).decodeCharRef ();

  var t = null;
  if (/<p\s+class="js-tweet-text\s+tweet-text[^>]*>(.*?)<\/p>/.test (html)) {
    t = RegExp.$1;
  }
  else if (/<div\s+class="tweet-text\s+js-tweet-text[^>]*>(.*?)<\/div>/.test (html)) {
    t = RegExp.$1;
  }
  else {
    return this._unknown ('ツイート本文が見つかりません。');
  }

  // ツイート本文の末尾が pic.twitter.com/*** なら切り離す
  this.pic_id = '';  // *** 部分のみ
  var picRe = /^(.*?)\s*<a\s[^>]*class="[^"]*twitter-timeline-link[^"]*"[^>]*>pic\.twitter\.com\/([^<]+)<\/a>\s*$/;
  if (picRe.test (t)) {
    t = RegExp.$1;
    this.pic_id = RegExp.$2;
  }

  this.title = (new Utf8 (t)).removeTags ().decodeCharRef ();

  // 画像(または動画)のURLを抽出する
  return this._analyzeTweetImage ();
};


// 単一のツイートに含まれる画像を抽出する
Twitter.prototype._getTweetImage = function (url) {
  var http = this.http = new Http ();

  function getRetweetOriginalUrl () {
    var tweetUrl = /^https:\/\/twitter\.com\/[^\/]+\/status\/\d+$/;

    if (http.code == 302 && tweetUrl.test (http.location)) {
      return http.location;
    }
    return null;
  }

  for (;;) {
    if (http.get (url)) {
      // ツイートのHTMLが取得できた成功
      break;
    }

    var retweet = getRetweetOriginalUrl ();
    if (retweet) {
      // 自分がリツイートした他人の画像ツイート
      url = retweet;
      continue;
    }

    // それ以外なら失敗
    return this._httpError ();
  }

  // 取得したHTMLを解析する
  return this._analyzeTweet ();
};


// media/grid の JSON を解析してリストに追加
//  最後の data-item-id を返す
Twitter.prototype._analyzeMediaGridJson = function (http, base) {
  var urls = [ ];
  var lastId = null;

  function add (s, p1) {
    lastId = p1;
    urls.push (p1);
    return '';
  }
  http.data.replace (/\sdata-item-id=\\"(\d+)\\"/g, add);

  var len = urls.length;
  for (var i = 0; i < len; ++i) {
    this._add ({ Url: base + urls [i] });
  }

  return lastId;
};


// 画像一覧に含まれる画像を抽出する
Twitter.prototype._getMediaImage = function (url) {
  if (!/^(https?:\/\/[^\/]*\/)([^\/]+)\//.test (url)) {
    return this._ng ('内部エラー');
  }
  var head = RegExp.$1;
  var twitterId = RegExp.$2;

  var http = this.http = new Http ();
  http.setRequestHeader ('Referer', head + twitterId + '/media');

  var base = head + twitterId + '/status/';
  var json = head + 'i/profiles/show/' + twitterId + '/media_timeline';
  var maxId = '';

  for (;;) {
    if (!http.getXhr (json + maxId)) {
      return http._httpError ();
    }
    if (this.debug) {
      http.capture ('media_timeline' + maxId.replace (/\?max_id=/, '_') + '_json.txt');
    }

    var lastId = this._analyzeMediaGridJson (http, base);
    if (!lastId) {
      if (/"max_id"\s*:\s*"-1"/.test (http.data)) {
        // {"max_id":"-1","has_more_items":true,"items_html":""}
        // が返ってくることがある(ブラウザで閲覧するとスピナーが回り続ける)
        this._p ('"max_id":"-1" が検出されました。古いツイートが取得できません。');
        break;
      }

      return this._unknown ('data-item-id が見つかりません。');
    }

    // 2回目以降は URL に ?max_id=〜 をつける
    maxId = '?max_id=' + lastId;

    if (!/"has_more_items"\s*:\s*(true|false)/.test (http.data)) {
      return this._unknown ('has_more_items が見つかりません。');
    }
    if (RegExp.$1 == 'false') {
      break;
    }
  }

  if (this.items.length == 0) {
    return this._unknown ('ダウンロード対象が見つかりませんでした。');
  }

  this.type = null;
  return this._ok ();
};


// public: ファイル URL を取得する
Twitter.prototype.get = function (url) {
  this.items = [ ];
  this.type = null;

  this.twitter_id = null;
  this.user_name = null;
  this.id = null;
  this.pic_id = null;

  var path = (new URL (url)).path.slice (1);

  if (/^[^\/]+\/status(es)?\/\d+(\/photo\/\d+(\/large)?)?(#.*)?$/.test (path)) {
    return this._getTweetImage (url);
  }
  if (/^([^\/]+)\/media$/.test (path)) {
    return this._getMediaImage (url);
  }

  return this._mis ();
};


// ファイル名関係の定数
Twitter.prototype._PATH_MAX = 260;
Twitter.prototype._DOTS = '…';

// タイトルを短くする
Twitter.prototype._compactTitle = function (nb, itemData, title) {
  var folder = itemData.hasKey ('Folder') ? itemData.Folder : Dorothy.getSaveFolder ();
  var filenameMax = this._PATH_MAX - folder.sizeOf ();

  // 超過しているバイト数
  var overBytes = itemData.Filename.sizeOf () - filenameMax;
  if (overBytes <= 0) {
    return null;
  }
  overBytes += this._DOTS.sizeOf ();

  if (nameOf (title) === 'Utf8') {
    title = title.toSJIS ();
  }

  // タイトルに許されるバイト数
  var allowedBytes = title.sizeOf () - overBytes;

  // 十分短くなるまで、後ろから1文字ずつ削ってバイト数を確かめる
  for (var i = title.length; --i >= 0;) {
    var s = title.slice (0, i);
    if (nb.normalize (s).sizeOf () <= allowedBytes) {
      return s + this._DOTS;
    }
  }

  // タイトルを0文字にしても長過ぎるので諦める
  return this._DOTS;
};


// public: ファイル名を生成する
//   NameBuilder 指定時は必ず Format も指定すること。
Twitter.prototype.buildFilename = function (args) {
  var nb = args.hasKey ('NameBuilder') && args.NameBuilder;
  if (!nb) {
    return this._ok ();
  }
  var fmt = args.Format;

  nb.twitter_id = this.twitter_id;
  nb.user_name = this.user_name;
  nb.id = this.id;
  nb.pic_id = this.pic_id;

  var title = this.title.toSJIS ();

  var items = this.items;
  var len = nb.pages = items.length;

  for (var i = 0; i < len; ++i) {
    nb.p = i;
    var itemData = items [i];
    var urlWithoutSize = itemData.Url.replace (/:[a-z]*$/, '');

    nb.f = urlWithoutSize.replace (/^.*\/|\.[^.\/]*$/g, '');
    nb.title = title;

    var fnData = nb.buildFilename (fmt, urlWithoutSize);

    var compacted = this._compactTitle (nb, fnData, title);
    if (compacted) {
      nb.title = compacted;
      fnData = nb.buildFilename (fmt, urlWithoutSize);
    }

    for (var key in fnData) {
      itemData [key] = fnData [key];
    }
  }

  return this._ok ();
};


// public: ダウンロード情報を登録する
Twitter.prototype.download = function (args) {
  return this._downloadFiles (args);
};


//------------------------------- メイン処理 -------------------------------


  if (scriptMode === 'DEFINE_ONLY') {
    return;
  }

  var ini = Util.ini_load (defaultIni);

  var getter = new Twitter ();

  if (getter.get (urlinfo.url)) {
    var type = getter.type;

    if (type) {
      var nb = new NameBuilder ({
        zen2han: ini.General.Zen2Han,
        definePPZ: ini.General.PageOrigin
      });

      getter.buildFilename ({
        NameBuilder: nb,
        Format: ini.Filename [type]
      });
    }

    getter.download ({
      AddItem: new AddItem (ini.AddItem)
    });
  }

  getter.end ();
}


// EOF
