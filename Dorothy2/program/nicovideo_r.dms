//Dorothy2
//caption=ニコニコ動画_r
//version=20150821.0
//hint=
//match=^http://www\.nicovideo\.jp/watch\/([a-z]{2})?\d+
//author=rentan
//path=program
//priority=500
//end

/*
Copyright (C) 2013,2014,2015 rentan at rentan.org

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

function (scriptMode) {

  common_load ('rutil', 'browsercookie', 'namebuilder');
  Util.min_version (20150702.0);

  // 設定ファイルの読み込み
  var defaultIni = {
    Cookie: BrowserCookie.prototype.iniTemplate,
    General: {
      Zen2Han: true,
      Eco: false
    },
    Filename: {
      Video: '%TITLE% %ID%'
    }
  };


//------------------------------- NicoVideo --------------------------------


common_load ('browsercookie', 'esx\json', 'getter', 'http', 'utf8');


// コンストラクタ
void function NicoVideo (opt) {
  this._bcookie = this._getArg (opt, 'Cookie', { }, function (v) {
    return new BrowserCookie (v);
  });

  this._eco = this._getArg (opt, 'Eco', false);
};

Getter (NicoVideo);


// ブラウザから Cookie を読み込む
NicoVideo.prototype._importCookie = function (url) {
  var o = {
    host: (new URL (url)).host.replace (/^.*(\.nicovideo\.jp)$/, '$1'),
    name: 'user_session'
  };
  this.cookie = this._bcookie.import (o) || '';
};


// Eco: true ならURLに ?eco=1 を付ける
NicoVideo.prototype._appendQuery = function (url) {
  return url + (this._eco ? '?eco=1' : '');
};


// 視聴ページを取得する
//  削除動画 -> 404 Not Found
//  コミュニティ専用動画 -> 403 Forbidden
NicoVideo.prototype._loadWatchPage = function (url) {
  var http = this.http = new Http ();

  this._importCookie (url);
  http.setRequestHeader ('Cookie', this.cookie);

  if (http.get (this._appendQuery (url))) {
    return this._ok ();
  }

  // チャンネル動画は so\d+ は \d+(別の数字) に転送される
  var loc = http.getResponseHeader ('location');
  if (http.code == 301 && /^(http:\/\/www\.nicovideo\.jp\/watch\/(\d+))(\?eco=1)?$/.test (loc)) {
    this.id = RegExp.$2;
    var digitUrl = this._appendQuery (RegExp.$1);
    if (http.get (digitUrl)) {
      return this._ok ();
    }
  }

  return this._httpError ();
};


// JSON のプロパティ参照用メソッドを設定する
NicoVideo.prototype._jsonAccessor = function (obj) {
  obj.get = function (key, type, typeJp) {
    if (!this.hasKey (key)) {
      throw key + ' がありません。';
    }
    var v = this [key];

    if (type && type != typeof v) {
      throw key + ' が' + typeJp + 'ではありません。';
    }

    return v;
  };

  obj.getStr = function (key) {
    return this.get (key, 'string', '文字列');
  };
  obj.getNum = function (key) {
    return this.get (key, 'number', '数値');
  };

  return obj;
};


// 秒数を MM:SS 形式の文字列に変換する
//  MMの上位桁はゼロサプレス、60分以上の場合も時間に分割しない。
NicoVideo.prototype._lengthToString = function (n) {
  var sec = n % 60;
  var ss = (sec < 10) ? '0' + sec : sec;
  var m = (n - sec) / 60;

  return m + ':' + ss;
};


// nickname の末尾の「 さん」を削除する
NicoVideo.prototype._stripHonorific = function (s) {
  var tail = ' さん'.toUTF8 ();

  var sb = new StringBuffer (s);
  var len = sb.length - tail.sizeOf ();
  return (sb.substr (len) == tail) ? sb.substr (0, len) : sb.toString ();
};


// 視聴ページを解析する
NicoVideo.prototype._analyzeWatchPage = function () {

  if (!/<div\s+id="watchAPIDataContainer"[^>]*>([^<]+)/.test (this.http.data)) {
    return this._ng ('watchAPIDataContainer がありません。');
  }
  var s = (new Utf8 (RegExp.$1)).decodeCharRef ().toUTF8 ();

  if (this.debug) {
    (new Http ()).saveFile ({ filename: 'watchAPIDataContainer.json', data: s });
  }

  function getObj (obj, key) {
    return this._jsonAccessor (obj.get (key, 'object', 'オブジェクト'));
  }

  try {
    var json = this._jsonAccessor (JSON.parse (s));

    var flashvars = getObj (json, 'flashvars');

    this.movie_type = flashvars.getStr ('movie_type');

    var videoDetail = getObj (json, 'videoDetail');

    this.video_id = videoDetail.getStr ('id');
    this.title = videoDetail.getStr ('title');
    this.length = this._lengthToString (videoDetail.getNum ('length'));

    this.user_id = this.channel_no = this.community_id = '';

    if (json.hasKey ('channelInfo')) {
      var channelInfo = getObj (json, 'channelInfo');

      this.channel_no = videoDetail.getNum ('channelId');
      this.nickname = channelInfo.getStr ('name');
    }
    else if (json.hasKey ('communityInfo')) {
      var communityInfo = getObj (json, 'communityInfo');

      this.user_id = communityInfo.getStr ('id');
      this.nickname = communityInfo.getStr ('name');
    }
    else {
      var uploaderInfo = getObj (json, 'uploaderInfo');

      this.user_id = uploaderInfo.getStr ('id');
      this.nickname = this._stripHonorific (uploaderInfo.getStr ('nickname'));
    }
  }
  catch (e) {
    return this._ng (e);
  }

  return this._ok ();

};


// 視聴ページを取得して解析する
// 視聴ページにアクセスしてからでないと getflv が失敗するので省略不可
NicoVideo.prototype._scanWatchPage = function (url) {
  if (!this._loadWatchPage (url)) {
    return false;
  }
  this.cookie = this.http.getRequestHeader ('Cookie');

  return this._analyzeWatchPage ();
};


// getflv を取得して解析する
NicoVideo.prototype._getFlv = function () {
  var url = this._appendQuery ('http://flapi.nicovideo.jp/api/getflv/' + this.id);

  var http = this.http = new Http ();
  http.setRequestHeader ('Cookie', this.cookie);

  if (!http.get (url)) {
    return this._httpError ();
  }

  if (/^(.*&)?closed=1(&|$)/.test (http.data)) {
    return this._ng ('closed=1: ログインしていません。');
  }

  if (!/^(.*&)url=([^&]*)/.test (http.data)) {
    http.capture ();
    return this._unknown ('&url= が見つかりません。');
  }
  var u = decodeURIComponent (RegExp.$2);
  if (!u) {
    return this._unknown ('&url= の値が空です(有料動画?)。');
  }

  // エコノミーモード
  this.eco = /low$/.test (u);
  if (this.eco) {
    this._p ('エコノミーモードです。');
    if (!this._eco) {
      return this._ng ();
    }
  }

  if (this.movie_type == 'swf') {
    u += 'as3';
  }

  return this._add ({ Url: u, Cookie: this.cookie, ext: '.' + this.movie_type });
};


// public: ファイルURLを取得する
NicoVideo.prototype.get = function (url) {
  this.items = [ ];

  this.cookie = '';
  this.video_id = null;  // 動画ID (チャンネル動画は so\d+)
  this.movie_type = null;
  this.eco = false;
  this.title = null;
  this.length = null;  // 再生時間

  this.channel_no = null;  // チャンネル番号 \d+
  this.community_id = null;  // co\d+
  this.user_id = null;
  this.nickname = null;

  // 動画ID (チャンネル動画は後で \d+ に書き換わる)
  if (!/^(http:\/\/www\.nicovideo\.jp\/watch\/(([a-z]{2})?\d+))([?#].*)?$/.test (url)) {
    return this._mis ();
  }
  this.id = RegExp.$2;
  url = RegExp.$1;

  return this._scanWatchPage (url)
      && this._getFlv ();
};


// public: ファイル名を生成する
NicoVideo.prototype.buildFilename = function (args) {
  var nb = args.NameBuilder;

  nb.id = this.id;
  nb.video_id = this.video_id;
  nb.title = new Utf8 (this.title);
  nb.time = this.length;
  nb.user_id = this.user_id || this.community_id || 'ch' + this.channel_no;
  nb.nickname = new Utf8 (this.nickname);

  return this._buildFilename (args);
};


// public: ダウンロード情報を登録する
NicoVideo.prototype.download = function (args) {
  return this._downloadFiles (args);
};


//------------------------------- メイン処理 -------------------------------


  if (scriptMode === 'DEFINE_ONLY') {
    return;
  }

  var ini = Util.ini_load (defaultIni);

  var getter = new NicoVideo ({ Cookie: ini.Cookie, Eco: ini.General.Eco });

  if (getter.get (urlinfo.url)) {
    getter.buildFilename ({
      NameBuilder: new NameBuilder ({ zen2han: ini.General.Zen2Han }),
      Format: ini.Filename.Video
    });

    getter.download ();
  }

  getter.end ();
}


// EOF
