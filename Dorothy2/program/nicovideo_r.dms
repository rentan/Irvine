//Dorothy2
//caption=ニコニコ動画_r
//version=20141209.0
//hint=
//match=^http://www\.nicovideo\.jp/watch\/([a-z]{2})?\d+
//author=rentan
//path=program
//priority=500
//end

/*
Copyright (C) 2013,2014 rentan at rentan.org

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

function (scriptMode) {

  common_load ('rutil', 'browsercookie', 'namebuilder');
  Util.min_version (20141209.0);

  // 設定ファイルの読み込み
  var default_ini = {
    Cookie: BrowserCookie.prototype.iniTemplate,
    General: {
      Zen2Han: true
    },
    Filename: {
      Video: '%TITLE% %ID%'
    }
  };


//------------------------------- NicoVideo --------------------------------


common_load ('browsercookie', 'domparser\pseudo_xml', 'getter', 'http', 'utf8');


// コンストラクタ
void function NicoVideo (opt) {
  this._bcookie = this._getArg (opt, 'Cookie', { }, function (v) {
    return new BrowserCookie (v);
  });
};

Getter (NicoVideo);


// ブラウザから Cookie を読み込む
NicoVideo.prototype._importCookie = function (url) {
  var o = {
    host: (new URL (url)).host.replace (/^.*(\.nicovideo\.jp)$/, '$1'),
    name: 'user_session'
  };
  this.cookie = this._bcookie.import (o) || '';
};


// thumbinfo のエラー情報を文字列化
NicoVideo.prototype._getFailCodeMessage = function (status, code) {
  var s = {
    DELETED: '動画が削除されています。',
    NOT_FOUND: '動画がありません。'
  };

  if (fc && s.hasKey (fc)) {
    return s [fc];
  }

  return 'エラー: status=' + this.status + ', code=' + fc;
};


// thumbinfo を解析する
NicoVideo.prototype._analyzeThumbinfo = function () {
  var ctype = this.http.getResponseHeader ('content-type') || '';
  ctype = ctype.replace (/;.*$/, '');
  if (ctype != 'application/xml') {
    return this._unknown ('未対応の Content-Type です。');
  }

  function getElement (node, tagName) {
    var elements = node.getElementsByTagName (tagName);
    if (!elements.length) {
      throw tagName + ' がありません。';
    }
    if (elements.length > 1) {
      throw tagName + ' が複数あります。';
    }

    return elements [0];
  }

  function getTextValue (e) {
    var len = e.childNodes.length;
    if (!len) {
      throw e.tagName + ' の子ノードがありません。';
    }
    if (len > 1) {
      throw e.tagName + ' の子ノードが複数あります。';
    }
    if (e.firstChild.nodeName != '#text') {
      throw e.tagName + ' の子ノードがテキストではありません。';
    }

    return e.firstChild.nodeValue;
  }

  function getText (node, tagName) {
    return getTextValue (getElement (node, tagName));
  }

  function getText2 (node, tagName) {
    var elements = node.getElementsByTagName (tagName);
    if (!elements.length) {
      return '';
    }
    if (elements.length > 1) {
      throw tagName + ' が複数あります。';
    }

    return getTextValue (elements [0]);
  }

  var document;
  try {
    document = (new DOMParser ()).parseFromString (this.http.data, ctype);;

    var resp = getElement (document, 'nicovideo_thumb_response');
    var status = resp.getAttribute ('status');

    if (nameOf (document) === 'PseudoXmlDocument') {
      resp = document;
    }

    if (status == null) {
      throw 'status="..." がありません。';
    }
    if (status == 'fail') {
      var code = getText (resp, 'code');
      throw this._getFailCodeMessage (status, code);
    }
    if (status != 'ok') {
      throw '未対応の status="..." です。';
    }

    this.video_id = getText (resp, 'video_id');
    this.title = getText (resp, 'title');
    this.length = getText (resp, 'length');
    this.movie_type = getText (resp, 'movie_type');

    // <user_id>: 一般動画のみ
    // <ch_id>: チャンネル動画のみ
    this.user_id = getText2 (resp, 'user_id');
    this.channel_no = getText2 (resp, 'ch_id');

    if (!this.user_id && !this.channel_no) {
      throw 'user_id または ch_id がありません。';
    }

    // <user_nickname>: 一般動画のみ
    // <ch_name>: チャンネル動画のみ
    var name = getText2 (resp, 'user_nickname') || getText2 (resp, 'ch_name');
    if (!name) {
      throw 'user_nickname または ch_name がありません。';
    }
    this.nickname = name;
  }
  catch (e) {
    return this._unknown (e);
  }
  finally {
    if (document) {
      document.destroy ();
      document = null;
    }
  }

  return this._ok ();
};


// thumbinfo を取得する
NicoVideo.prototype._loadThumbinfo = function () {
  var url = 'http://ext.nicovideo.jp/api/getthumbinfo/' + this.id;

  this.http = new Http ();
  if (!this.http.get (url)) {
    return this._httpError ();
  }

  return this._ok ();
};


// thumbinfo を取得して解析する
NicoVideo.prototype._scanThumbinfo = function () {
  return this._loadThumbinfo () && this._analyzeThumbinfo ();
};


// 視聴ページを取得する
NicoVideo.prototype._loadWatchPage = function (url) {
  var http = this.http = new Http ();

  this._importCookie (url);
  http.setRequestHeader ('Cookie', this.cookie);

  if (http.get (url)) {
    return this._ok ();
  }

  // チャンネル動画は so\d+ は \d+(別の数字) に転送される
  var loc = http.getResponseHeader ('location');
  if (http.code == 301 && /^http:\/\/www\.nicovideo\.jp\/watch\/(\d+)$/.test (loc)) {
    this.id = RegExp.$1;

    if (http.get (loc)) {
      return this._ok ();
    }
  }

  return this._httpError ();
};


// 視聴ページを取得して解析する
NicoVideo.prototype._scanWatchPage = function (url) {
  if (!this._loadWatchPage (url)) {
    return false;
  }
  this.cookie = this.http.getRequestHeader ('Cookie');

  // 現状では解析の必要なし
  // ただし視聴ページにアクセスしてからでないと getflv が失敗するので
  // ページの読み込みは省略不可

  return this._ok ();
};


// getflv を取得して解析する
NicoVideo.prototype._getFlv = function () {
  var url = 'http://flapi.nicovideo.jp/api/getflv/' + this.id;

  var http = this.http = new Http ();
  http.setRequestHeader ('Cookie', this.cookie);

  if (!http.get (url)) {
    return this._httpError ();
  }

  if (/^(.*&)?closed=1(&|$)/.test (http.data)) {
    return this._ng ('closed=1: ログインしていません。');
  }

  if (!/^(.*&)url=([^&]*)/.test (http.data)) {
    http.capture ();
    return this._unknown ('&url= が見つかりません。');
  }
  var u = decodeURIComponent (RegExp.$2);
  if (!u) {
    return this._unknown ('&url= の値が空です(有料動画?)。');
  }

  // エコノミーモード
  this.eco = /low$/.test (u);
  if (this.eco) {
    return this._ng ('エコノミーモードです。');
  }

  if (this.movie_type == 'swf') {
    u += 'as3';
  }

  return this._add ({ Url: u, Cookie: this.cookie, ext: '.' + this.movie_type });
};


// public: ファイルURLを取得する
NicoVideo.prototype.get = function (url) {
  this.items = [ ];

  this.cookie = '';
  this.video_id = null;  // 動画ID (チャンネル動画は so\d+)
  this.movie_type = null;
  this.eco = null;
  this.title = null;
  this.length = null;  // 再生時間
  this.user_id = null;
  this.nickname = null;
  this.channel_no = null;  // チャンネル番号 \d+

  // 動画ID (チャンネル動画は後で \d+ に書き換わる)
  if (!/^(http:\/\/www\.nicovideo\.jp\/watch\/(([a-z]{2})?\d+))([?#].*)?$/.test (url)) {
    return this._mis ();
  }
  this.id = RegExp.$2;
  url = RegExp.$1;

  return this._scanThumbinfo ()
      && this._scanWatchPage (url)
      && this._getFlv ();
};


// public: ダウンロード情報を登録する
NicoVideo.prototype.download = function (args) {
  var nb = args.hasKey ('NameBuilder') && args.NameBuilder;

  if (nb) {
    nb.id = this.id;
    nb.video_id = this.video_id;
    nb.title = new Utf8 (this.title);
    nb.time = this.length;
    nb.user_id = this.user_id || 'ch' + this.channel_no;
    nb.nickname = new Utf8 (this.nickname);
  }

  return this._downloadFiles (args);
};


//------------------------------- メイン処理 -------------------------------


  if (scriptMode === 'DEFINE_ONLY') {
    return;
  }

  var ini = Util.ini_load (default_ini);

  var getter = new NicoVideo ({ Cookie: ini.Cookie });

  if (getter.get (urlinfo.url)) {
    getter.download ({
      NameBuilder: new NameBuilder ({ zen2han: ini.General.Zen2Han }),
      Format: ini.Filename.Video
    });
  }

  getter.end ();
}


// EOF
