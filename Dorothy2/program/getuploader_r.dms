//Dorothy2
//caption=getuploader_r
//version=20160208.0
//hint=getuploader.com (uploader.jp)
//match=^http://u[^/.]+\.getuploader\.com/[^/]+/download/\d+
//author=rentan
//path=program
//priority=500
//addition=user\getuploader_r\password_irvn.default.ini
//end

/*
Copyright (C) 2013-2016 rentan at rentan.org

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

function (scriptMode) {

  common_load ('rutil', 'additem', 'namebuilder');
  Util.min_version (20160208.0);

  // 設定ファイルの読み込み
  var defaultIni = {
    AddItem: AddItem.prototype.iniTemplate,
    General: {
      Zen2Han: false,
      Timestamp: 'getter',    // 'true', 'ThreadStorage', 'Touch' or 'false'
      Touch: 'C:\gnupack\app\cygwin\cygwin\bin\touch.exe'
    }
  };


//-------------------------- GetUploaderPassword ---------------------------


// コンストラクタ
void function GetUpPassword (url) {
  this.strippedUrl = url;
  this._dlPassword = '';

  // URLの末尾に ?password=... 形式でパスワードが指定されていれば分離する
  if (/^(.*)\?password=(.*)$/.test (url)) {
    this.strippedUrl = RegExp.$1;
    this._dlPassword = decodeURIComponent (RegExp.$2);
  }

  var path = (new URL (this.strippedUrl)).path.slice (1);
  /^([a-z0-9_\-]+)\/download\/(\d+)/i.test (path);
  this._name = RegExp.$1 || '';
  this._num = RegExp.$2 || '';
};


// Ini オブジェクトを返す
GetUpPassword.prototype._getIni = function () {
  var base = Dorothy.userPath + 'password_' + this._name;

  var iniPath = base + '.ini';
  if (File.exists (iniPath)) {
    return new Ini (iniPath);
  }

  var defPath = base + '.default.ini';
  return new Ini (defPath);
};


// public: 閲覧パスワードを取得する
GetUpPassword.prototype.getViewPassword = function () {
  var ini = this._getIni ();
  return ini.read ('General', 'ViewPassword', '');
};


// public: 1回だけ閲覧パスワードを返す(2回め以降は空文字列)
GetUpPassword.prototype.getViewPasswordOnce = function () {
  if (this.hasKey ('_vPassUsed')) {
    return '';
  }

  this._vPassUsed = true;
  return this.getViewPassword ();
};


// public: ダウンロードパスワードを取得する
GetUpPassword.prototype.getDownloadPassword = function () {
  if (this._dlPassword) {
    return this._dlPassword;
  }

  var ini = this._getIni ();
  return ini.read ('DownloadPassword', this._num, '')
      || ini.read ('General', 'DownloadPassword', '');
};


// public: 1回だけダウンロードパスワードを返す(2回め以降は空文字列)
GetUpPassword.prototype.getDownloadPasswordOnce = function () {
  if (this.hasKey ('_dPassUsed')) {
    return '';
  }

  this._dPassUsed = true;
  return this.getDownloadPassword ();
};


// JInput 用パラメータを生成する
GetUpPassword.prototype._createJInputOpt = function (extra) {
  // URLは簡略化して表示
  var u = this.strippedUrl.replace (/^https?:\/\/([^\/]+\/[^\/]+\/download\/\d+).*$/, '$1');

  return {
    title: Dorothy.matchFile,
    width: 500,
    height: 190,
    p: extra ? [ u, extra ] : [ u ]
  };
};


// パスワードを入力する
GetUpPassword.prototype._inputPassword = function (htaOpt, mode) {
  common_load ('jinput');

  htaOpt.p.push (mode);

  return (new JInput ()).inputText (htaOpt);
};


// public: 閲覧パスワードをダイアログで入力する
GetUpPassword.prototype.inputViewPassword = function () {
  var htaOpt = this._createJInputOpt ();
  return this._inputPassword (htaOpt, '閲覧パスワード');
};


// public: ダウンロードパスワードをダイアログで入力する
GetUpPassword.prototype.inputDownloadPassword = function (filename) {
  var htaOpt = this._createJInputOpt ('ファイル名: ' + filename);
  return this._inputPassword (htaOpt, 'ダウンロードパスワード');
};



//------------------------------ GetUploader -------------------------------

common_load ('getter', 'getter\lastmodified', 'http', 'htmlform', 'utf8');


// コンストラクタ
Getter (function GetUploader () {
  this.timestampMode = this.TS_NOCHANGE;
  this.touchCommand = null;
}, LastModified);


// 閲覧パスワードを入力してフォームに設定する
GetUploader.prototype._inputSecAuthForm = function (form) {
  var pw = form.getElementByName ('password');
  if (!pw) {
    return this._unknown ('<input id="password"> が見つかりません。');
  }

  var t = this._password.getViewPasswordOnce ();

  if (!t) {
    t = this._password.inputViewPassword ();
    if (t === null) {
      return this._exit ();
    }
  }
  pw.value = t;
  println ('閲覧パスワード--->' + t.fromUTF8toSJIS ());

  return this._ok ();
};


// 指定した文字列より後方を返す
GetUploader.prototype._getRightContext = function (searchWord) {
  searchWord = searchWord.toUTF8 ();

  var sb = new StringBuffer (this.http.data);

  var n = sb.indexOf (searchWord);

  if (n < 0) {
    return '';
  }

  return sb.slice (n + searchWord.sizeOf ()).toString ();
};


// ファイル名を抽出する
GetUploader.prototype._findFilename = function () {
  var s = this._getRightContext ('>オリジナル</th>');

  if (!/^\s*<td>([^<]+)</.test (s)) {
    return this._unknown ('ファイル名が見つかりません。');
  }
  this._filename = (new Utf8 (RegExp.$1.trim ())).decodeCharRef ();

  return this._ok ();
};


// 投稿日時を抽出する
GetUploader.prototype._findTimestamp = function () {
  var s = this._getRightContext ('>日時</th>');

  if (!/^\s*<td>([^<]+)</.test (s)) {
    return this._unknown ('アップロード日時が見つかりません。');
  }

  s = RegExp.$1.trim ();

  if (!/^(\d{4})\/(\d\d)\/(\d\d)\s+(\d\d):(\d\d):(\d\d)$/.test (s)) {
    return this._unknown ('対応していないアップロード日時の形式です。');
  }
  var jst = RegExp.lastMatch;
  this._jstNumber = [
    RegExp.$1, RegExp.$2, RegExp.$3,
    RegExp.$4, RegExp.$5, '.', RegExp.$6
  ].join ('');

  this._utc = this._parseJstDate (jst);

  return this._ok ();
};


// ダウンロードパスワードを入力してフォームに設定する
GetUploader.prototype._inputDownloadPasswordForm = function (form) {
  var pw = form.getElementByName ('password');
  if (!pw) {
    return this._unknown ('<input name="password"> が見つかりません。');
  }

  if (!this._findFilename ()) {
    return false;
  }

  var t = this._password.getDownloadPasswordOnce ();

  if (!t) {
    t = this._password.inputDownloadPassword (this._filename.toSJIS ());
    if (t === null) {
      return this._exit ();
    }
  }
  pw.value = t;
  println ('DLパスワード--->' + t.fromUTF8toSJIS ());

  return this._ok ();
};


// ページに表示されているフォームの種類を調べる
GetUploader.prototype._getFormType = function () {
  var unknown = { type: 'unknown', form: null };

  var forms = new HtmlForms (this.http);

  var form = forms.getFormByElementName ('q');
  if (form) {
    var q = form.getElementByName ('q');
    var value = q && q.value;

    // 年齢確認
    if (value == 'age_confirmation') {
      return { type: 'age', form: form };
    }

    // 閲覧パスワード
    if (value == 'security_auth') {
      return { type: 'secAuth', form: form };
    }

    return unknown;
  }

  form = forms.getFormByName ('agree');
  if (form) {
    // ダウンロードパスワード
    var pw = form.getElementByName ('password');
    if (pw) {
      return { type: 'password', form: form };
    }

    // ダウンロードボタンがあるはず
    return { type: 'download', form: form };
  }

  return unknown;
};


// ダウンロードページを取得する
GetUploader.prototype._loadDownloadPage = function (url) {
  // 自動で送信するフォームは必ず回数制限を設けること
  var ageCount = 0;

  var http = this.http;
  if (!http.get (url)) {
    return this._httpError ();
  }

  var form;
  for (;;) {
    var ft = this._getFormType ();
    form = ft.form;

    if (ft.type == 'download') {
      // ダウンロードボタンが表示された
      break;
    }

    var r = true;
    if (ft.type == 'age') {
      if (++ageCount > 1) {
        return this._ng ('年齢確認フォームが' + ageCount + '回繰り返されました。');
      }
    }
    else if (ft.type == 'secAuth') {
      r = this._inputSecAuthForm (form);
    }
    else if (ft.type == 'password') {
      r = this._inputDownloadPasswordForm (form);
    }
    else {
      return this._unknown ('未対応のフォームです。');
    }

    if (!r) {
      return false;
    }

    // 入力したフォームを送信
    if (!http.exec (form.submit ())) {
      return this._httpError ();
    }
  }

  return this._clickDownloadButton (form);
};


// ダウンロードボタンをクリック
GetUploader.prototype._clickDownloadButton = function (form) {

  // 念のためダウンロード可能な状態になったか確認
  //   <input type="hidden" name="token" value="***" />
  //   <input type="submit" value="ダウンロード" name="yes" />
  var token = form.getElementByName ('token');
  if (!token) {
    return this._unknown ('<input name="token"> が見つかりません。');
  }


  if (!this._filename && !this._findFilename ()) {
    return false;
  }
  if (!this._findTimestamp ()) {
    return false;
  }

  if (!this.http.exec (form.submit ())) {
    return this._httpError ();
  }

  return this._ok ();
};


// public: ファイルのURLを取得する
GetUploader.prototype.get = function (url) {
  this.items = [ ];

  this._filename = null;
  this._utc = null;
  this._jstNumber = null;

  var http = this.http = new Http ();

  this._password = new GetUpPassword (url);
  var strippedUrl = this._password.strippedUrl;

  if (!this._loadDownloadPage (strippedUrl)) {
    return false;
  }

  if (!/<a\s+href="(http:\/\/[^"]+)"[^>]*>\s*Download\s*Now\s*<\/a>/i.test (http.data)) {
    this._ng ('ダウンロードリンクが見つかりません。');
  }
  var fileUrl = (new Utf8 (RegExp.$1)).decodeCharRef ().toUTF8 ();

  var f = this._filename.toSJIS ();

  var itemData = { Url: fileUrl, Referer: http.baseUrl, Filename: f };
  if (this.timestampMode == this.TS_GETTER) {
    this._setLastModified (itemData, this._dateToLastModified (this._utc));
  }

  return this._add (itemData);
};


// public: 保存ファイル名を設定
GetUploader.prototype.buildFilename = function (args) {
  return this._normalizeFilename (args);
};


// public: タイムスタンプ変更モード
GetUploader.prototype.TS_NOCHANGE = '';
GetUploader.prototype.TS_GETTER = 'getter';
GetUploader.prototype.TS_THREADSTORAGE = 'threadstorage';
GetUploader.prototype.TS_TOUCH = 'touch';


// public: タイムスタンプ変更モードを設定する
GetUploader.prototype.setTimestampMode = function (t) {
  t = t.trim ();

  if (/^getter$/i.test (t)) {
    if (!this._isLastModifiedEnabled ()) {
      return this._ng ('Timestamp=true の設定は使用できません。');
    }
    this.timestampMode = this.TS_GETTER;
    return this._ok ();
  }

  if (/^threadstorage$/i.test (t)) {
    if (!Dorothy.hasKey ('getThreadStorage')) {
      return this._ng ('Timestamp=ThreadStorage の設定は使用できません。');
    }
    this.timestampMode = this.TS_THREADSTORAGE;
    return this._ok ();
  }

  if (/^(touch|true)$/i.test (t)) {
    this.timestampMode = this.TS_TOUCH;
    return this._ok ();
  }

  if (/^(false)?$/i.test (t)) {
    this.timestampMode = this.TS_NOCHANGE;
    return this._ok ();
  }

  return this._ng ('Timestamp の設定が正しくありません: ' + t);
};


// public: touch コマンドを設定する
GetUploader.prototype.setTouchCommand = function (touch) {
  this.touchCommand = touch;
};


// ファイルをダウンロードして保存してタイムスタンプを設定する
GetUploader.prototype._saveAndTouch = function () {
  var f = new File (this.touchCommand);
  if (!f.exists ()) {
    return this._ng ('touch コマンドが見つかりません: ' + f.path);
  }

  var item = this.items [0];

  var http = new Http ();
  http.setRequestHeader ('Referer', item.Referer);

  if (!http.get (item.Url)) {
    return this._httpError ();
  }

  var result = http.capture (item);
  if (!result.success) {
    return this._ng (result.error);
  }
  f = result.filename;

  var q = (f.indexOf ('"') == -1) ? '"' : "'";
  var opt = '-c -t ' + this._jstNumber;

  common_load ('exec');
  result = Exec (this.touchCommand, opt, q + f + q);

  if (result != 0) {
    return this._ng ('コマンド実行失敗。');
  }

  return this._ok ();
};


// public: ダウンロード情報を登録する
GetUploader.prototype.download = function (args) {
  if (!this._downloadFiles (args)) {
    return false;
  }

  // タイムスタンプ変更のための処理
  var ts = this.timestampMode;
  if (ts == this.TS_THREADSTORAGE) {
    var stor = Dorothy.getThreadStorage ();
    stor.setItem ('headers.last-modified', this._dateToLastModified (this._utc));
  }
  else if (ts == this.TS_TOUCH) {
    if (!this._saveAndTouch ()) {
      return false;
    }
    item.filename = '';  // 保存したファイルに [0] が付かないように
    Util.remove_this ();
  }

  return this._ok ();
};


// public: 必要ならアイテムを再登録する
//   OK: 再登録成功  NG: 失敗  MIS: 再登録は不要だった
GetUploader.prototype.reQueue = function (args, url) {
  if (this.timestampMode != this.TS_TOUCH) {
    return this._mis (null);
  }

  if (!/^(http:\/\/[^\/]+\/[^\/]+\/download\/\d+)\/[^?#]+(.*)$/.test (url)) {
    return this._mis (null);
  }
  var itemData = { Url: RegExp.$1 + RegExp.$2 };

  if (item.folder) {
    itemData.Folder = item.folder;
  }

  if (!args.AddItem.reQueue (itemData, true)) {
    return this._ng ('AddItem.reQueue失敗。');
  }
  return this._ok ();
};


//------------------------------- メイン処理 -------------------------------


  if (scriptMode === 'DEFINE_ONLY') {
    return;
  }

  var ini = Util.ini_load (defaultIni);

  var getter = new GetUploader ();

  if (!getter.setTimestampMode (ini.General.Timestamp)) {
    return getter.end ();
  }
  getter.setTouchCommand (ini.General.Touch);

  getter.reQueue ({ AddItem: new AddItem (ini.AddItem) }, urlinfo.url);
  if (getter.status != getter.MIS) {
    return getter.end ();
  }

  if (getter.get (urlinfo.url)) {
    getter.buildFilename ({
      NameBuilder: new NameBuilder ({ zen2han: ini.General.Zen2Han })
    });
    getter.download ();
  }

  getter.end ();
}


// EOF
