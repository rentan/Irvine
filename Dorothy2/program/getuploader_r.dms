//Dorothy2
//caption=getuploader_r
//version=20141209.0
//hint=getuploader.com (uploader.jp)
//match=^http://u[^/.]+\.getuploader\.com/[^/]+/download/\d+
//author=rentan
//path=program
//priority=500
//end

/*
Copyright (C) 2013,2014 rentan at rentan.org

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

function (scriptMode) {

  common_load ('rutil', 'additem', 'namebuilder');
  Util.min_version (20141209.0);

  // 設定ファイルの読み込み
  var default_ini = {
    AddItem: AddItem.prototype.iniTemplate,
    General: {
      Zen2Han: false,
      Timestamp: 'ThreadStorage',    // or '' or 'Touch'
      Touch: 'C:\gnupack\app\cygwin\cygwin\bin\touch.exe'
    }
  };


//------------------------------ GetUploader -------------------------------

common_load ('getter', 'http', 'htmlform', 'utf8');


// コンストラクタ
void function GetUploader () {
  this.timestampMode = this.TS_NOCHANGE;
  this.touchCommand = null;
};

Getter (GetUploader);


// 予め指定されたパスワード
GetUploader.prototype._secAuthPassword = '';
GetUploader.prototype._dlPassword = '';


// URLに対応した閲覧パスワードを取得する
GetUploader.prototype._getSecAuthPassword = function (url) {
  // サンプル
  // if (/^http:\/\/u*\.getuploader\.com\/***\//.test (url)) {
  //   return '***';
  // }

  return '';
};


// Irvine Uploader のダウンロードパスワード
GetUploader.prototype._irvnPassword = {
  11: 'irvine',
  35: 'irvine',
  222: 'Irvine',
  302: 'Irvine',
  340: 'Irvine',
  359: 'Irvine',
  500: 'Irvine'
};

// URLに対応したダウンロードパスワードを取得する
GetUploader.prototype._getDownloadPassword = function (url) {

  if (/^http:\/\/u1\.getuploader\.com\/irvn\/download\/(\d+)/.test (url)) {
    var n = RegExp.$1;
    return this._irvnPassword.hasKey (n) ? this._irvnPassword [n] : '';
  }

  return '';
};


// JInput 用パラメータを生成する
GetUploader.prototype._createJInputOpt = function (url, extra) {
  // URLは簡略化して表示
  var u = url.replace (/^https?:\/\/([^\/]+\/[^\/]+\/download\/\d+).*$/, '$1');

  var o = {
    title: Dorothy.matchFile,
    width: 500,
    height: 190,
    p: [ u ]
  };

  if (extra) {
    o.p.push (extra);
  }

  return o;
};


// パスワードを入力する
GetUploader.prototype._inputPassword = function (htaOpt, mode) {
  common_load ('jinput');

  htaOpt.p.push (mode);

  return (new JInput ()).inputText (htaOpt);
};


// 閲覧パスワードを入力してフォームに設定する
GetUploader.prototype._inputSecAuthForm = function (form) {
  var pw = form.getElementById ('password');
  if (!pw) {
    return this._unknown ('<input id="password"> が見つかりません。');
  }

  var t = this._secAuthPassword;
  this._secAuthPassword = '';

  if (!t) {
    var htaOpt = this._createJInputOpt (this.http.baseUrl);
    t = this._inputPassword (htaOpt, '閲覧パスワード');
    if (t === null) {
      return this._exit ();
    }
  }
  pw.value = t;
  println ('閲覧パスワード--->' + t);

  return this._ok ();
};


// 指定した文字列より後方を返す
GetUploader.prototype._getRightContext = function (searchWord) {
  searchWord = searchWord.toUTF8 ();

  var sb = new StringBuffer (this.http.data);

  var n = sb.indexOf (searchWord);

  if (n < 0) {
    return '';
  }

  return sb.slice (n + searchWord.sizeOf ()).toString ();
};


// ファイル名を抽出する
GetUploader.prototype._findFilename = function () {
  var s = this._getRightContext ('>オリジナル</span>');

  if (!/^\s*<span\s+class="right">([^<]+)</.test (s)) {
    return this._unknown ('ファイル名が見つかりません。');
  }
  this._filename = (new Utf8 (RegExp.$1.trim ())).decodeCharRef ();

  return this._ok ();
};


// 投稿日時を抽出する
GetUploader.prototype._findTimestamp = function () {
  var s = this._getRightContext ('>日時</span>');

  if (!/^\s*<span\s+class="right">([^<]+)</.test (s)) {
    return this._unknown ('アップロード日時が見つかりません。');
  }

  s = RegExp.$1.trim ();

  if (!/^(\d{4})\/(\d\d)\/(\d\d)\s+(\d\d):(\d\d):(\d\d)$/.test (s)) {
    return this._unknown ('対応していないアップロード日時の形式です。');
  }
  this._jst = RegExp.lastMatch;
  this._jstNumber = [
    RegExp.$1, RegExp.$2, RegExp.$3,
    RegExp.$4, RegExp.$5, '.', RegExp.$6
  ].join ('');

  return this._ok ();
};


// ダウンロードパスワードを入力してフォームに設定する
GetUploader.prototype._inputDownloadPasswordForm = function (form) {
  var pw = form.getElementByName ('password');
  if (!pw) {
    return this._unknown ('<input name="password"> が見つかりません。');
  }

  var t = this._dlPassword;
  this._dlPassword = '';

  if (!this._findFilename ()) {
    return false;
  }

  if (!t) {
    var f = 'ファイル名: ' + this._filename.toSJIS ();

    var htaOpt = this._createJInputOpt (this.http.baseUrl, f);
    t = this._inputPassword (htaOpt, 'ダウンロードパスワード');
    if (t === null) {
      return this._exit ();
    }
  }
  pw.value = t;
  println ('DLパスワード--->' + t);

  return this._ok ();
};


// ページに表示されているフォームの種類を調べる
GetUploader.prototype._getFormType = function () {
  var unknown = { type: 'unknown', form: null };

  var forms = new HtmlForms (this.http);

  var form = forms.getFormById ('loginform');
  if (form) {
    var q = form.getElementByName ('q');

    // 年齢確認
    if (q && q.value == 'age_confirmation') {
      return { type: 'age', form: form };
    }

    // 閲覧パスワード
    if (q && q.value == 'security_auth') {
      return { type: 'secAuth', form: form };
    }

    return unknown;
  }

  form = forms.getFormByName ('agree');
  if (form) {
    // ダウンロードパスワード
    var pw = form.getElementByName ('password');
    if (pw) {
      return { type: 'password', form: form };
    }

    // ダウンロードボタンがあるはず
    return { type: 'download', form: form };
  }

  return unknown;
};


// ダウンロードページを取得する
GetUploader.prototype._loadDownloadPage = function (url) {
  // 自動で送信するフォームは必ず回数制限を設けること
  var ageCount = 0;

  var http = this.http;
  if (!http.get (url)) {
    return this._httpError ();
  }

  var form;
  for (;;) {
    var ft = this._getFormType ();
    form = ft.form;

    if (ft.type == 'download') {
      // ダウンロードボタンが表示された
      break;
    }

    var r = true;
    if (ft.type == 'age') {
      if (++ageCount > 1) {
        return this._ng ('年齢確認フォームが' + ageCount + '回繰り返されました。');
      }
    }
    else if (ft.type == 'secAuth') {
      r = this._inputSecAuthForm (form);
    }
    else if (ft.type == 'password') {
      r = this._inputDownloadPasswordForm (form);
    }
    else {
      return this._unknown ('未対応のフォームです。');
    }

    if (!r) {
      return false;
    }

    // 入力したフォームを送信
    if (!http.exec (form.submit ())) {
      return this._httpError ();
    }
  }

  return this._clickDownloadButton (form);
};


// ダウンロードボタンをクリック
GetUploader.prototype._clickDownloadButton = function (form) {

  // 念のためダウンロード可能な状態になったか確認
  //   <input type="hidden" name="token" value="***" />
  //   <input type="submit" value="ダウンロード" name="yes" />
  var token = form.getElementByName ('token');
  if (!token) {
    return this._unknown ('<input name="token"> が見つかりません。');
  }


  if (!this._filename && !this._findFilename ()) {
    return false;
  }
  if (!this._findTimestamp ()) {
    return false;
  }

  if (!this.http.exec (form.submit ())) {
    return this._httpError ();
  }

  return this._ok ();
};


// URLの末尾に ?password=abc 形式でパスワードが指定されていれば分離する
GetUploader.prototype._splitPassword = function (url) {
  if (/^(.*)\?password=(.*)$/.test (url)) {
    url = RegExp.$1;
    this._dlPassword = decodeURIComponent (RegExp.$2);
  }

  return url;
};


// public: ファイルのURLを取得する
GetUploader.prototype.get = function (url) {
  this.items = [ ];

  this._filename = null;
  this._jst = null;
  this._jstNumber = null;

  var http = this.http = new Http ();


  // ダウンロードパスワードを抽出
  url = this._splitPassword (url);

  this._secAuthPassword = this._getSecAuthPassword (url);
  this._dlPassword = this._dlPassword || this._getDownloadPassword (url);

  if (!this._loadDownloadPage (url)) {
    return false;
  }

  if (!/<a\s+href="(http:\/\/[^"]+)"[^>]*>\s*Download\s*Now\s*<\/a>/i.test (http.data)) {
    this._ng ('ダウンロードリンクが見つかりません。');
  }
  var fileUrl = RegExp.$1;

  var f = this._filename.toSJIS ();

  return this._add ({ Url: fileUrl, Referer: http.baseUrl, Filename: f });
};


// public: タイムスタンプ変更モード
GetUploader.prototype.TS_NOCHANGE = '';
GetUploader.prototype.TS_THREADSTORAGE = 'threadstorage';
GetUploader.prototype.TS_TOUCH = 'touch';


// public: タイムスタンプ変更モードを設定する
GetUploader.prototype.setTimestampMode = function (t) {
  t = t.trim ();

  if (/^threadstorage$/i.test (t)) {
    if (!Dorothy.hasKey ('getThreadStorage')) {
      return this._ng ('Timestamp=ThreadStorage の設定は使用できません。');
    }
    this.timestampMode = this.TS_THREADSTORAGE;
    return this._ok ();
  }

  if (/^(touch|true)$/i.test (t)) {
    this.timestampMode = this.TS_TOUCH;
    return this._ok ();
  }

  if (/^(false)?$/i.test (t)) {
    this.timestampMode = this.TS_NOCHANGE;
    return this._ok ();
  }

  return this._ng ('Timestamp の設定が正しくありません: ' + t);
};


// public: touch コマンドを設定する
GetUploader.prototype.setTouchCommand = function (touch) {
  this.touchCommand = touch;
};


// ファイルをダウンロードして保存してタイムスタンプを設定する
GetUploader.prototype._saveAndTouch = function () {
  var f = new File (this.touchCommand);
  if (!f.exists ()) {
    return this._ng ('touch コマンドが見つかりません: ' + f.path);
  }

  var item = this.items [0];

  var http = new Http ();
  http.setRequestHeader ('Referer', item.Referer);

  if (!http.get (item.Url)) {
    return this._httpError ();
  }

  var result = http.capture (item);
  if (!result.success) {
    return this._ng (result.error);
  }
  f = result.filename;

  var q = (f.indexOf ('"') == -1) ? '"' : "'";
  var opt = '-c -t ' + this._jstNumber;

  common_load ('exec');
  result = Exec (this.touchCommand, opt, q + f + q);

  if (result != 0) {
    return this._ng ('コマンド実行失敗。');
  }

  return this._ok ();
};


GetUploader.prototype._days = [ 'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat' ];
GetUploader.prototype._months =
  [ 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec' ];

// Last-Modified 形式のタイムスタンプ
GetUploader.prototype._getLastModified = function () {
  var d = new Date (this._jst);

  // new Date() で GMT としてパースされるので補正する
  var offset = 9 * 60 * 60 * 1000;
  d.setTime (d.getTime () - offset);

  var day = this._days [ d.getUTCDay() ];
  var month = this._months [ d.getUTCMonth () ];

  d.format = 'yyyy hh:mm:ss';
  var y_hms = d.toUTCString ();

  return format ('%s, %.2d %s %s GMT', day, d.getUTCDate (), month, y_hms);
};


// public: ダウンロード情報を登録する
GetUploader.prototype.download = function (args) {
  if (!this._downloadFiles (args)) {
    return false;
  }

  // タイムスタンプ変更のための処理
  if (this.timestampMode == this.TS_THREADSTORAGE) {
    var stor = Dorothy.getThreadStorage ();
    stor.setItem ('headers.Last-Modified', this._getLastModified ());
  }
  else if (this.timestampMode == this.TS_TOUCH) {
    if (!this._saveAndTouch ()) {
      return false;
    }
    item.filename = '';  // 保存したファイルに [0] が付かないように
    Util.remove_this ();
  }

  return this._ok ();
};


// public: 必要ならアイテムを再登録する
//   OK: 再登録成功  NG: 失敗  MIS: 再登録は不要だった
GetUploader.prototype.reQueue = function (args, url) {
  if (this.timestampMode != this.TS_TOUCH) {
    return this._mis (null);
  }

  if (!/^(http:\/\/[^\/]+\/[^\/]+\/download\/\d+)\/[^?#]+(.*)$/.test (url)) {
    return this._mis (null);
  }
  var itemData = { Url: RegExp.$1 + RegExp.$2 };

  if (item.folder) {
    itemData.Folder = item.folder;
  }

  if (!args.AddItem.reQueue (itemData, true)) {
    return this._ng ('AddItem.reQueue失敗。');
  }
  return this._ok ();
};


//------------------------------- メイン処理 -------------------------------


  if (scriptMode === 'DEFINE_ONLY') {
    return;
  }

  var ini = Util.ini_load (default_ini);

  var getter = new GetUploader ();

  if (!getter.setTimestampMode (ini.General.Timestamp)) {
    return getter.end ();
  }
  getter.setTouchCommand (ini.General.Touch);

  getter.reQueue ({ AddItem: new AddItem (ini.AddItem) }, urlinfo.url);
  if (getter.status != getter.MIS) {
    return getter.end ();
  }

  if (getter.get (urlinfo.url)) {
    getter.download ({
      NameBuilder: new NameBuilder ({ zen2han: ini.General.Zen2Han }),
      Normalize: true
    });
  }

  getter.end ();
}


// EOF
