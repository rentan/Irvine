//Dorothy2
//caption=YouTube/動画情報
//version=20160704.0
//hint=
//match=^https?://www\.youtube\.com/(watch\?v=|v/|embed/).
//author=rentan
//path=program
//priority=510
//end

/*
Copyright (C) 2012-2016 rentan at rentan.org

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

function (scriptMode) {

  common_load ('rutil', 'getter\youtubevideo', 'additem', 'browsercookie', 'http', 'namebuilder', 'utf8');
  Util.min_version (20160704.0);

  var defaultIni = {
    AddItem: AddItem.prototype.iniTemplate,
    Cookie: BrowserCookie.prototype.iniTemplate,
    General: {
      Zen2Han: true,
      HandOver: false,
      AskExec: true,
      SortReverse: true,
      GetFileSize: true,
      SeparateFileSize: true
    },
    Download: {
      Download: false,
      Priority: '102,101,100,85,84,83,82,78,59,46,45,44,43,38,37,36,35,34,22,18,17,13,5'
    },
    Filename: {
      VideoInfo: '%TITLE% yt_%ID%',
      Video:  '%TITLE% yt_%ID%',
      Video2: '%TITLE% yt_%ID%'
    }
  };


//---------------------------- YouTubeVideoInfo ----------------------------


// コンストラクタ
Getter (function YouTubeVideoInfo (ini) {
  this._ini = ini;
});


// public: 動画の情報を取得する
YouTubeVideoInfo.prototype.get = function (url) {
  var ini = this._ini;

  var video = this._youtubeVideo = new YouTubeVideo ({ Debug: debug });
  if (!video.get (url)) {
    return false;
  }

  video.sort (ini.General.SortReverse);

  return this._ok ();
};


// 動画情報のテキストをファイルに保存する
YouTubeVideoInfo.prototype._saveTextToFile = function (nb) {
  var ini = this._ini;

  var text = this._youtubeVideo.toText ({
    getFileSize: ini.General.GetFileSize,
    separateFileSize: ini.General.SeparateFileSize
  });

  // 保存ファイル名
  var itemData = nb.buildFilename (ini.Filename.VideoInfo, '.txt');

  // ファイルに書き出す
  var sf = (new Http ()).saveFile ({ filename: itemData, data: text });
  if (!sf.success) {
    return this._ng ('ファイルの書き込みに失敗しました。');
  }

  return this._ok ('動画情報を保存しました。');
};


// ダウンロードする itag を決定する
YouTubeVideoInfo.prototype._selectFmt = function (priority) {
  var video = this._youtubeVideo;

  priority = priority.trim ().split (/\s*,\s*|\s+/);

  var not3d = !video.stereo3d;

  var pLen = priority.length;
  for (var pIdx = 0; pIdx < pLen; ++pIdx) {
    function err (s) {
      return priority [pIdx] + ': ' + s;
    }

    var itag = priority [pIdx];
    var itag2 = null;

    if (/^(\d+)\+(\d+)$/.test (itag)) {
      // 248+172 のような映像・音声別ファイルの双方指定
      itag = RegExp.$1;
      itag2 = parseInt (RegExp.$2);
    }
    else if (!/^\d+$/.test (itag)) {
      return { errMsg: err ('itag の指定が正しくありません。') };
    }
    itag = parseInt (itag);

    var fmt = video.getFmtItem (itag);
    if (!fmt) {
      continue;
    }

    // 3D動画でないのに stereo3d=1 なら無視する(自動変換機能による擬似3D動画)
    if (not3d && fmt.stereo3d) {
      if (this.debug) {
        this._p (err ('自動変換3D動画のため無視します。'));
      }
      continue;
    }

    if (itag2 == null) {
      // itag 単独指定で見つかったら終了
      return { fmt: fmt, fmt2: null };
    }

    // 双方指定

    if (fmt.audioAndVideo) {
      return { errMsg: err ('指定した itag が MPEG-DASH 形式ではありません。') };
    }

    var fmt2 = video.getFmtItem (itag2);
    if (!fmt2) {
      if (this.debug) {
        this._p (err ('指定した追加 itag のファイルがありません。'));
      }
      continue;
    }

    if (fmt2.audioAndVideo) {
      return { errMsg: err ('指定した追加 itag が MPEG-DASH 形式ではありません。') };
    }

    if (fmt.audioOnly == fmt2.audioOnly) {
      // 音声+音声、映像+映像の双方指定はできない
      return { errMsg: err ('指定した追加 itag が同じ形式です。') };
    }

    // 双方指定で映像、音声形式正しく見つかった
    return { fmt: fmt, fmt2: fmt2 };
  }

  return { errMsg: '指定した itag のファイルがありません。' };
};


// ダウンロード対象を追加
YouTubeVideoInfo.prototype._addFile = function (nb, format, fmt) {
  var itemData = nb.buildFilename (format, fmt.ext);
  itemData.Url = fmt.url;
  itemData.Referer = this._youtubeVideo.flashUrl;

  return this._add (itemData);
};


// ダウンロード対象を選択
YouTubeVideoInfo.prototype._selectFiles = function (nb) {
  var ini = this._ini;

  var fmts = this._selectFmt (ini.Download.Priority);

  if (fmts.hasKey ('errMsg')) {
    return this._ng (fmts.errMsg);
  }

  var fmt = fmts.fmt;
  var fmt2 = fmts.fmt2;

  if (fmt.isRTMP || (fmt2 && fmt2.isRTMP)) {
    return this._ng ('RTMP 形式の動画はダウンロードできません。');
  }
  if (!fmt.url || (fmt2 && !fmt2.url)) {
    return this._ng ('ファイルの URL が取得できませんでした。');
  }

  // ダウンロード対象を登録する
  this._p ('itag=' + fmt.itag + ' をダウンロードします。');
  this._addFile (nb, ini.Filename.Video, fmt);


  // 追加ダウンロード
  if (fmt2) {
    this._p ('itag=' + fmt2.itag + ' を追加ダウンロードします。');
    this._addFile (nb, ini.Filename.Video2, fmt2);
  }

  return this._ok ();
};


// public: ダウンロード情報を登録する
YouTubeVideoInfo.prototype.download = function () {
  var ini = this._ini;
  var video = this._youtubeVideo;

  var nb = new NameBuilder ({ zen2han: ini.General.Zen2Han });

  nb.id = video.id;
  nb.author = (new Utf8 (video.author)).decodeCharRef ();
  nb.title = (new Utf8 (video.title)).decodeCharRef ();
  nb.time = video.time;

  if (!this._saveTextToFile (nb)) {
    return false;
  }

  if (ini.Download.Download) {
    if (!this._selectFiles (nb)) {
      return false;
    }

    var args = {
      AddItem: new AddItem (ini.AddItem)
    };

    if (!this._downloadFiles (args)) {
      return false;
    }
  }

  if (!ini.General.HandOver) {
    Util.remove_this ();
  }
  return this._ok ();
};


//------------------------------- メイン処理 -------------------------------


  if (scriptMode === 'DEFINE_ONLY') {
    return;
  }

  var ini = Util.ini_load (defaultIni);

  if (ini.General.AskExec) {
    var c = Global.confirm (Dorothy.matchFile + ' を実行します。');
    if (!c) {
      return;
    }
  }

  var getter = new YouTubeVideoInfo (ini);

  if (getter.get (urlinfo.url)) {
    getter.download ();
  }

  return getter.end ();
}


// EOF
